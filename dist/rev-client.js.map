{"version":3,"sources":["../src/utils/is-utils.ts","../src/interop/index.ts","../src/utils/rate-limit.ts","../src/utils/index.ts","../src/rev-error.ts","../src/utils/paged-request.ts","../src/utils/request-utils.ts","../src/api/admin.ts","../src/utils/parse-csv.ts","../src/api/audit-request.ts","../src/api/audit.ts","../src/api/oauth.ts","../src/api/auth.ts","../src/api/category.ts","../src/api/channel.ts","../src/api/device.ts","../src/api/group.ts","../src/api/playlist.ts","../src/api/recording.ts","../src/utils/file-utils.ts","../src/api/upload.ts","../src/api/user.ts","../src/api/video-report-request.ts","../src/api/video-download.ts","../src/api/video.ts","../src/api/webcast-report-request.ts","../src/api/webcast.ts","../src/api/zones.ts","../src/rev-session.ts","../src/rev-client.ts","../src/index.ts"],"sourcesContent":["const { toString: _toString } = Object.prototype;\r\n\r\nexport function isPlainObject<T = { [key: string]: any; } | any[]>(val: unknown): val is T {\r\n    if (_toString.call(val) !== '[object Object]') {\r\n        return false;\r\n    }\r\n    const prototype = Object.getPrototypeOf(val);\r\n    return prototype === null || prototype === Object.getPrototypeOf({ });\r\n}\r\n\r\nexport function isBlobLike(val: unknown): val is Blob | File {\r\n    return typeof (val as Blob)?.stream === 'function';\r\n}\r\n\r\nexport function isReadable<T = any>(val: unknown): val is AsyncIterable<T> {\r\n    return typeof (val as AsyncIterable<T>)[Symbol.asyncIterator] === 'function';\r\n}\r\n\r\nexport function titleCase(val: string) {\r\n    return `${val[0]}${val.slice(1)}`;\r\n}\r\n\r\n// exclude 0 / false from falsy check\r\nexport function isBlank(val: any) {\r\n    return val == undefined || val === '';\r\n}\r\n","/**\r\n * There are slight differences in handling browser and node.js environments.\r\n * This folder wraps all components that get polyfilled in node.js, as well as\r\n * allowing uploading a video from the local filesystem on node.js\r\n */\r\nimport { isBlobLike } from '../utils/is-utils';\r\nimport type { UploadFileOptions, FileUploadPayloadInternal, FileUploadType } from '../utils/file-utils';\r\n\r\n\r\n/**\r\n * used in OAuth - get random verifier string\r\n * @param byteLength\r\n */\r\nfunction randomValues(byteLength: number) {\r\n    const values = crypto.getRandomValues(new Uint8Array(byteLength / 2));\r\n    return Array.from(values)\r\n        .map(c => c.toString(16).padStart(2, '0'))\r\n        .join('');\r\n}\r\n\r\n/**\r\n * sha256 hash function for oauth2 pkce\r\n * @param value\r\n * @returns\r\n */\r\nasync function sha256Hash(value: string) {\r\n    const bytes = new TextEncoder().encode(value);\r\n    const hashed = await crypto.subtle.digest('SHA-256', bytes);\r\n    const binary = String.fromCharCode(...(new Uint8Array(hashed)));\r\n    return btoa(binary)\r\n        .replace(/\\//g, '_')\r\n        .replace(/\\+/g, '-')\r\n        .replace(/=+$/, '');\r\n}\r\n\r\n\r\n/**\r\n * used to sign the verifier in OAuth workflow\r\n */\r\nasync function hmacSign(message: string, secret: string) {\r\n    const enc = new TextEncoder();\r\n    const cryptoKey = await crypto.subtle\r\n        .importKey(\r\n            'raw',\r\n            enc.encode(secret),\r\n            { name: 'HMAC', hash: 'SHA-256' },\r\n            true,\r\n            ['sign']\r\n        );\r\n    const signed = await crypto.subtle.sign('HMAC', cryptoKey, enc.encode(message));\r\n    return btoa(String.fromCharCode(...new Uint8Array(signed)));\r\n}\r\n\r\n\r\nexport default {\r\n    AbortController: globalThis.AbortController,\r\n    AbortSignal: globalThis.AbortSignal,\r\n    createAbortError(message: string): Error {\r\n        return new DOMException(message, 'AbortError');\r\n    },\r\n    fetch: (...args: Parameters<typeof fetch>) => globalThis.fetch(...args),\r\n    FormData: globalThis.FormData,\r\n    Headers: globalThis.Headers,\r\n    Request: globalThis.Request,\r\n    Response: globalThis.Response,\r\n    randomValues,\r\n    sha256Hash,\r\n    hmacSign,\r\n    /**\r\n     *\r\n     * @param file\r\n     * @param filename\r\n     * @param contentType\r\n     * @returns\r\n     */\r\n    async parseFileUpload(file: FileUploadType, options: UploadFileOptions): Promise<FileUploadPayloadInternal> {\r\n        let {\r\n            filename,\r\n            contentType,\r\n            contentLength\r\n        } = options;\r\n\r\n        if (isBlobLike(file)) {\r\n            const { type, name, size } = <File>file;\r\n            if (type && !contentType) {\r\n                contentType = type;\r\n            }\r\n            if (name && !filename) {\r\n                filename = name;\r\n            }\r\n            if (size && !contentLength) {\r\n                contentLength = size;\r\n            }\r\n\r\n            return {\r\n                file,\r\n                options: {\r\n                    ...options,\r\n                    filename,\r\n                    contentType,\r\n                    contentLength\r\n                }\r\n            };\r\n        }\r\n        throw new TypeError('Only Blob / Files are supported for file uploads. Pass a File/Blob object');\r\n    },\r\n    appendFileToForm(form: FormData, fieldName: string, payload: FileUploadPayloadInternal) {\r\n        const {\r\n            file,\r\n            options: {\r\n                filename\r\n            }\r\n        } = payload;\r\n        form.append(fieldName, file as Blob, filename);\r\n    },\r\n    async prepareUploadHeaders(form: FormData, headers: Headers, useChunkedTransfer?: boolean) {\r\n        // nothing - this is used for fixing node's form-data behavior\r\n    }\r\n};\r\n","import polyfills from '../interop';\r\n\r\nconst ONE_MINUTE = 60 * 1000;\r\n\r\ninterface RateLimitOptions{\r\n    /**\r\n     * how many to allow in parallel in any given interval\r\n     * @default 1\r\n     */\r\n    limit?: number,\r\n    /**\r\n     * interval in milliseconds\r\n     */\r\n    interval?: number,\r\n    /**\r\n     * set limit to X per second\r\n     */\r\n    perSecond?: number,\r\n    /**\r\n     * set limit to X per minute (can be fraction, i.e. 0.5 for 1 every 2 minutes)\r\n     */\r\n    perMinute?: number,\r\n    /**\r\n     * set limit to X per hour\r\n     */\r\n    perHour?: number,\r\n    /**\r\n     * cancel with AbortController\r\n     */\r\n    signal?: AbortSignal\r\n}\r\n\r\ntype ThrottledFunction<T extends (...args: any[]) => any> = (\r\n    (...args: Parameters<T>) => ReturnType<T> extends PromiseLike<infer Return> ? Promise<Return> : Promise<ReturnType<T>>\r\n) & {\r\n    /**\r\n    Abort pending executions. All unresolved promises are rejected with a `CancelError` error.\r\n    */\r\n    abort: () => void;\r\n};\r\n\r\ninterface RateLimitOptionsWithFn<T> extends RateLimitOptions {\r\n    /**\r\n     * function to rate limit\r\n     */\r\n    fn: T\r\n}\r\nfunction rateLimit<T extends (...args: any) => any>(options: RateLimitOptionsWithFn<T>): ThrottledFunction<T>;\r\nfunction rateLimit<T extends (...args: any) => any>(fn: T, options: RateLimitOptions): ThrottledFunction<T>;\r\nfunction rateLimit<T extends (...args: any) => any>(fn: T | RateLimitOptionsWithFn<T>, options?: RateLimitOptions): ThrottledFunction<T>;\r\n\r\n// adapted from https://github.com/sindresorhus/p-throttle\r\nfunction rateLimit<T extends (...args: any) => any> (fn: T | RateLimitOptionsWithFn<T>, options: RateLimitOptions = {}) {\r\n    if (fn && (typeof fn === 'object')) {\r\n        options = Object.assign({}, fn, options);\r\n        fn = undefined as unknown as T;\r\n    }\r\n    if (!fn) {\r\n        fn = (options as RateLimitOptionsWithFn<T>).fn;\r\n    }\r\n\r\n    if (typeof fn !== 'function') {\r\n        throw new TypeError('Rate limit function is not a function');\r\n    }\r\n\r\n    const {\r\n        perSecond,\r\n        perMinute,\r\n        perHour,\r\n        signal\r\n    } = options;\r\n\r\n    let limit = parseFloat(options.limit as unknown as string) || 1;\r\n    let interval = parseInt(options.interval as unknown as string, 10);\r\n\r\n    if (perSecond) {\r\n        limit = parseFloat(perSecond as unknown as string);\r\n        interval = 1000;\r\n    }\r\n    if (perMinute) {\r\n        limit = parseFloat(perMinute as unknown as string);\r\n        interval = ONE_MINUTE;\r\n    }\r\n    if (perHour) {\r\n        limit = parseFloat(perHour as unknown as string);\r\n        interval = ONE_MINUTE * 60;\r\n    }\r\n\r\n    if (limit < 1) {\r\n        interval *= limit;\r\n        limit = 1;\r\n    } else {\r\n        // just make sure it isn't a faction for some silly reason\r\n        limit = Math.floor(limit);\r\n    }\r\n\r\n    if (!Number.isFinite(limit)) {\r\n        throw new TypeError(`Invalid limit ${limit}`);\r\n    }\r\n\r\n    if (!Number.isFinite(interval) || interval <= 0) {\r\n        throw new TypeError('Invalid interval option');\r\n    }\r\n\r\n    const queue:Map<NodeJS.Timeout, (err: Error) => any> = new Map();\r\n\r\n    let currentTick = 0;\r\n    let activeCount = 0;\r\n\r\n    type Return = ReturnType<T> extends PromiseLike<infer R> ? Promise<R> : Promise<ReturnType<T>>;\r\n\r\n    const throttled = function (...args: Parameters<T>) {\r\n        let timeout: NodeJS.Timeout;\r\n        return new Promise((resolve, reject) => {\r\n            const execute = () => {\r\n                resolve((fn as T).apply(null, args));\r\n                queue.delete(timeout);\r\n            };\r\n\r\n            const now = Date.now();\r\n\r\n            if ((now - currentTick) > interval) {\r\n                activeCount = 1;\r\n                currentTick = now;\r\n            } else if (activeCount < limit) {\r\n                activeCount++;\r\n            } else {\r\n                currentTick += interval;\r\n                activeCount = 1;\r\n            }\r\n\r\n            timeout = setTimeout(execute, currentTick - now);\r\n\r\n            // used for sending cancel error\r\n            queue.set(timeout, reject);\r\n        }) as Return;\r\n    };\r\n\r\n    throttled.abort = (message: string = 'Cancelled rate-limit queue') => {\r\n        for (const [timeout, reject] of queue.entries()) {\r\n            clearTimeout(timeout);\r\n            reject(polyfills.createAbortError(message));\r\n        }\r\n\r\n        queue.clear();\r\n    };\r\n\r\n    if (signal) {\r\n        signal.addEventListener('abort', () => throttled.abort());\r\n    }\r\n\r\n    return throttled;\r\n}\r\n\r\nexport default rateLimit;\r\n","export {default as rateLimit} from './rate-limit';\r\n\r\nexport * from './is-utils';\r\n\r\nexport function asValidDate(val: string | Date | undefined): Date | undefined;\r\nexport function asValidDate(val: string | Date | undefined, defaultValue: Date): Date;\r\nexport function asValidDate(val: string | Date | undefined, defaultValue?: Date): Date | undefined {\r\n    if (!val) {\r\n        return defaultValue;\r\n    }\r\n    if (!(val instanceof Date)) {\r\n        val = new Date(val);\r\n    }\r\n    return isNaN(val.getTime())\r\n    ? defaultValue\r\n    : val;\r\n}\r\n\r\n/**\r\n * Retry a function multiple times, sleeping before attempts\r\n * @param {() => Promise<T>} fn function to attempt. Return value if no error thrown\r\n * @param {(err: Error, attempt: number) => boolean} [shouldRetry] callback on error.\r\n * @param {number} [maxAttempts] maximum number of retry attempts before throwing error\r\n * @param {number} [sleepMilliseconds] milliseconds to wait between attempts\r\n * @returns {Promise<T>}\r\n */\r\nexport async function retry<T, E extends Error>(fn: () => Promise<T>, shouldRetry: (err: E, attempt?: number) => boolean = () => true, maxAttempts: number = 3, sleepMilliseconds: number = 1000) {\r\n    let attempt = 0;\r\n    while (attempt < maxAttempts) {\r\n        try {\r\n            const result = await fn();\r\n            return result;\r\n        } catch (err: any) {\r\n            attempt += 1;\r\n            if (attempt >= maxAttempts || !shouldRetry(err, attempt)) {\r\n                throw err;\r\n            }\r\n            await sleep(sleepMilliseconds);\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * delay async execution, with optional early exit using abort signal\r\n * @param ms\r\n * @param signal\r\n * @returns\r\n */\r\nexport async function sleep(ms: number, signal?: AbortSignal) {\r\n    return new Promise<void>(done => {\r\n        let timer: ReturnType<typeof setTimeout>;\r\n        const cleanup = () => {\r\n            clearTimeout(timer);\r\n            signal?.removeEventListener('abort', cleanup);\r\n            done();\r\n        };\r\n        timer = setTimeout(done, ms);\r\n        signal?.addEventListener('abort', cleanup);\r\n    });\r\n}\r\n\r\n/** try to parse as json */\r\nexport function tryParseJson(val: string): any {\r\n    if (val !== 'null' && val) {\r\n        try {\r\n            return JSON.parse(val);\r\n        } catch (err) {\r\n            // nothing\r\n        }\r\n    }\r\n    return null;\r\n};\r\n","import { isPlainObject, tryParseJson } from './utils';\r\n\r\nexport class RevError extends Error {\r\n    status: number;\r\n    url: string;\r\n    code: string;\r\n    detail: string;\r\n    constructor(response: Response, body: { [key: string]: any; } | string) {\r\n        const {\r\n            status = 500,\r\n            statusText = '',\r\n            url\r\n        } = response;\r\n        super(`${status} ${statusText}`);\r\n        // Chrome/node specific function\r\n        if ('captureStackTrace' in Error) {\r\n            (Error as any).captureStackTrace(this, this.constructor);\r\n        }\r\n\r\n        this.status = status;\r\n        this.url = url;\r\n        this.code = `${status}`;\r\n        this.detail = statusText;\r\n        // Some Rev API responses include additional details in its body\r\n        if (isPlainObject<Record<string, string>>(body)) {\r\n            if (body.code) {\r\n                this.code = body.code;\r\n            }\r\n            if (body.detail) {\r\n                this.detail = body.detail;\r\n            }\r\n        } else if (typeof body === 'string') {\r\n            body = body.trim();\r\n            // try to parse as JSON\r\n            if (body.startsWith('{')) {\r\n                const { code, detail } = tryParseJson(body) || { };\r\n                if (code) { this.code = code; }\r\n                if (detail) { this.detail = detail; }\r\n            } else if (this.status === 429) {\r\n                this.detail = 'Too Many Requests';\r\n            } else if (/^(<!DOCTYPE|<html)/.test(body)) {\r\n                // if html then strip out the extra cruft\r\n                this.detail = body\r\n                    .replace(/.*<body>\\s+/s, '')\r\n                    .replace(/<\\/body>.*/s, '')\r\n                    .slice(0, 256);\r\n            }\r\n        }\r\n    }\r\n    get name() {\r\n        return this.constructor.name;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return this.constructor.name;\r\n    }\r\n    static async create(response: Response) {\r\n        let body: any;\r\n\r\n        try {\r\n            // retrieve body - constructor will decode as json\r\n            body = await response.text();\r\n        } catch (err) {\r\n            body = {\r\n                code: 'Unknown',\r\n                detail: `Unable to parse error response body: ${err}`\r\n            };\r\n        }\r\n        return new RevError(response, body);\r\n    }\r\n}\r\n\r\nexport class ScrollError extends Error {\r\n    status: number;\r\n    code: string;\r\n    detail: string;\r\n    constructor(status: number = 408, code: string = 'ScrollExpired', detail: string = 'Timeout while fetching all results in search request') {\r\n        super('Search Scroll Expired');\r\n        Error.captureStackTrace(this, this.constructor);\r\n        this.status = status;\r\n        this.code = code;\r\n        this.detail = detail;\r\n    }\r\n    get name() {\r\n        return this.constructor.name;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return this.constructor.name;\r\n    }\r\n}\r\n","import { Rev } from '../types/rev';\r\n\r\nexport interface IPageResponse<T> {\r\n    items: T[],\r\n    done: boolean,\r\n    total?: number,\r\n    pageCount?: number,\r\n    error?: Error\r\n}\r\n\r\n/**\r\n * Interface to iterate through results from API endpoints that return results in pages.\r\n * Use in one of three ways:\r\n * 1) Get all results as an array: await request.exec() == <array>\r\n * 2) Get each page of results: await request.nextPage() == { current, total, items: <array> }\r\n * 3) Use for await to get all results one at a time: for await (let hit of request) { }\r\n */\r\nexport abstract class PagedRequest<ItemType> implements Rev.ISearchRequest<ItemType> {\r\n    current: number;\r\n    total: number | undefined;\r\n    done: boolean;\r\n    options: Required<Rev.SearchOptions<ItemType>>;\r\n    constructor(options: Rev.SearchOptions<ItemType> = {}) {\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            onProgress: (items: ItemType[], current: number, total?: number) => {},\r\n            onError: (err => { throw err; }),\r\n            onScrollError: (err => {\r\n                console.warn(\"DEPRECATED: use onError instead of onScrollError with rev search requests\");\r\n                this.options.onError(err);\r\n            }),\r\n            ...options\r\n        };\r\n\r\n        this.current = 0;\r\n        this.total = undefined;\r\n        this.done = false;\r\n    }\r\n    protected abstract _requestPage(): Promise<IPageResponse<ItemType>>;\r\n    /**\r\n     * Get the next page of results from API\r\n     */\r\n    async nextPage(): Promise<Rev.SearchPage<ItemType>> {\r\n        const {\r\n            onProgress,\r\n            onError\r\n        } = this.options;\r\n\r\n        if (this.done) {\r\n            return {\r\n                current: this.current,\r\n                total: this.current,\r\n                done: this.done,\r\n                items: []\r\n            };\r\n        }\r\n\r\n        const page = await this._requestPage();\r\n        const result = this._parsePage(page);\r\n\r\n        let {\r\n            current,\r\n            items,\r\n            total,\r\n            done,\r\n            error\r\n        } = result;\r\n\r\n        onProgress(items, current, total);\r\n\r\n        if (error) {\r\n            onError(error);\r\n        }\r\n\r\n        return {\r\n            current,\r\n            items,\r\n            total,\r\n            done\r\n        };\r\n    }\r\n    /**\r\n     * update internal variables based on API response\r\n     * @param page\r\n     * @returns\r\n     */\r\n    protected _parsePage(page: IPageResponse<ItemType>) {\r\n        const { maxResults } = this.options;\r\n\r\n        let {\r\n            items = [],\r\n            done = this.done,\r\n            total,\r\n            pageCount,\r\n            error,\r\n        } = page;\r\n\r\n        // let request function set done status\r\n        if (done) {\r\n            this.done = true;\r\n        }\r\n\r\n        // update total\r\n        if (isFinite(total!)) {\r\n            this.total = Math.min(total!, maxResults);\r\n        }\r\n\r\n        if (!pageCount) {\r\n            pageCount = items.length;\r\n        }\r\n\r\n        const current = this.current;\r\n\r\n        // limit results to specified max results\r\n        if (current + pageCount >= maxResults) {\r\n            pageCount = maxResults - current;\r\n            items = items.slice(0, pageCount);\r\n            this.done = true;\r\n        }\r\n\r\n        this.current += pageCount;\r\n\r\n        if (this.current === this.total) {\r\n            this.done = true;\r\n        }\r\n\r\n        if (this.done) {\r\n            // set total to current for results where not otherwise known in advance\r\n            this.total = this.current;\r\n        }\r\n\r\n        if (error) {\r\n            this.done = true;\r\n        }\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            error,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<ItemType[]> {\r\n        const results: ItemType[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    async* [Symbol.asyncIterator]() {\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n\r\n","import { ScrollError } from '../rev-error';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { Rev } from '../types';\r\nimport { IPageResponse, PagedRequest } from './paged-request';\r\n\r\nexport async function decodeBody(response: Response, acceptType?: string | null) {\r\n    const contentType = response.headers.get('Content-Type') || acceptType || '';\r\n\r\n    if (contentType.startsWith('application/json')) {\r\n        try {\r\n            return await response.json();\r\n        } catch (err) {\r\n            // keep going\r\n        }\r\n    }\r\n\r\n    if (contentType.startsWith('text')) {\r\n        return response.text();\r\n    }\r\n\r\n    return response.body;\r\n}\r\n\r\n/**\r\n * Interface to iterate through results from API endpoints that return results in pages.\r\n * Use in one of three ways:\r\n * 1) Get all results as an array: await request.exec() == <array>\r\n * 2) Get each page of results: await request.nextPage() == { current, total, items: <array> }\r\n * 3) Use for await to get all results one at a time: for await (let hit of request) { }\r\n */\r\nexport class SearchRequest<T> extends PagedRequest<T> {\r\n    declare options: Required<Rev.SearchOptions<T>>;\r\n    private query: Record<string, any>;\r\n    private _reqImpl: () => Promise<IPageResponse<T>>;\r\n    constructor(\r\n        rev: RevClient,\r\n        searchDefinition: Rev.SearchDefinition<T>,\r\n        query: Record<string, any> = {},\r\n        options: Rev.SearchOptions<T> = {}\r\n    ) {\r\n        super({\r\n            onProgress: (items: T[], current: number, total?: number | undefined) => {\r\n                const {hitsKey} = searchDefinition;\r\n                rev.log('debug', `searching ${hitsKey}, ${current}-${current + items.length} of ${total}...`);\r\n            },\r\n            onError: (err => { throw err; }),\r\n            ...options\r\n        });\r\n\r\n        // make copy of query object\r\n        const {\r\n            scrollId: _ignore,\r\n            ...queryOpt\r\n        } = query;\r\n        this.query = queryOpt;\r\n\r\n        this._reqImpl = this._buildReqFunction(rev, searchDefinition);\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n    }\r\n    protected _requestPage() {\r\n        return this._reqImpl();\r\n    }\r\n    private _buildReqFunction(rev: RevClient, searchDefinition: Rev.SearchDefinition<T>) {\r\n        const {\r\n            endpoint,\r\n            totalKey,\r\n            hitsKey,\r\n            isPost = false,\r\n            request,\r\n            transform\r\n        } = searchDefinition;\r\n\r\n        const requestFn = request || (isPost\r\n            ? rev.post.bind(rev)\r\n            : rev.get.bind(rev)\r\n        );\r\n\r\n        return async () => {\r\n\r\n            const response: Record<string, any> = await requestFn(endpoint, this.query, { responseType: 'json' });\r\n\r\n            let {\r\n                scrollId,\r\n                [totalKey]: total,\r\n                [hitsKey]: rawItems = [],\r\n                statusCode,\r\n                statusDescription\r\n            } = response;\r\n\r\n            let done = false;\r\n\r\n            this.query.scrollId = scrollId;\r\n            if (!scrollId) {\r\n                done = true;\r\n            }\r\n\r\n            const items: T[] = (typeof transform === 'function')\r\n                ? await Promise.resolve(transform(rawItems))\r\n                : rawItems;\r\n\r\n            if (items.length === 0) {\r\n                done = true;\r\n            }\r\n\r\n            // check for error response\r\n            const error = (statusCode >= 400 && !!statusDescription)\r\n                ? new ScrollError(statusCode, statusDescription)\r\n                : undefined;\r\n\r\n            return {\r\n                total,\r\n                done,\r\n                pageCount: rawItems.length,\r\n                items,\r\n                error\r\n            };\r\n        };\r\n    }\r\n}\r\n","import { Admin, Rev, Role, RegistrationField } from '..';\r\nimport type { RevClient } from '../rev-client';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\n// if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache. false means bypass cache\r\ntype CacheOption = boolean | 'Force'\r\n\r\nexport default function adminAPIFactory(rev: RevClient) {\r\n    let roles: Role.Details[];\r\n    let customFields: Admin.CustomField[];\r\n\r\n    const adminAPI = {\r\n        /**\r\n        * get mapping of role names to role IDs\r\n        * @param cache - if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache\r\n        */\r\n        async roles(cache: CacheOption = true): Promise<Role.Details[]> {\r\n            // retrieve from cached values if already stored. otherwise get from API\r\n            // if cache is 'Force' then refresh from\r\n            if (roles && cache === true) {\r\n                return roles;\r\n            }\r\n            const response = await rev.get('/api/v2/users/roles');\r\n            if (cache) {\r\n                roles = response;\r\n            }\r\n            return response;\r\n        },\r\n        /**\r\n        * Get a Role (with the role id) based on its name\r\n        * @param name Name of the Role, i.e. \"Media Viewer\"\r\n        * @param fromCache - if true then use previously cached Role listing (more efficient)\r\n        */\r\n        async getRoleByName(name: Role.RoleName, fromCache: CacheOption = true): Promise<Role> {\r\n            const roles = await adminAPI.roles(fromCache);\r\n            const role = roles.find(r => r.name === name);\r\n            if (!role) {\r\n                throw new TypeError(`Invalid Role Name ${name}. Valid values are: ${roles.map(r => r.name).join(', ')}`);\r\n            }\r\n            return {\r\n                id: role.id,\r\n                name: role.name\r\n            };\r\n        },\r\n        /**\r\n        * get list of custom fields\r\n        * @param cache - if true allow storing/retrieving from cached values. 'Force' means refresh value saved in cache\r\n        */\r\n        async customFields(cache: CacheOption = true): Promise<Admin.CustomField[]> {\r\n            // retrieve from cached values if already stored. otherwise get from API\r\n            // if cache is 'Force' then refresh from\r\n            if (customFields && cache === true) {\r\n                return customFields;\r\n            }\r\n            const response = await rev.get('/api/v2/video-fields', undefined, { responseType: 'json' });\r\n            if (cache) {\r\n                customFields = response;\r\n            }\r\n            return response;\r\n        },\r\n        /**\r\n        * Get a Custom Field based on its name\r\n        * @param name name of the Custom Field\r\n        * @param fromCache if true then use previously cached Role listing (more efficient)\r\n        */\r\n        async getCustomFieldByName(name: string, fromCache: CacheOption = true): Promise<Admin.CustomField> {\r\n            const customFields = await adminAPI.customFields(fromCache);\r\n            const field = customFields.find(cf => cf.name === name);\r\n            if (!field) {\r\n                throw new TypeError(`Invalid Custom Field Name ${name}. Valid values are: ${customFields.map(cf => cf.name).join(', ')}`);\r\n            }\r\n            return field;\r\n        },\r\n        async brandingSettings(): Promise<Admin.BrandingSettings> {\r\n            return rev.get('/api/v2/accounts/branding-settings');\r\n        },\r\n        async webcastRegistrationFields(): Promise<RegistrationField & { id: string }> {\r\n            const response = await rev.get('/api/v2/accounts/webcast-registration-fields');\r\n            return response.registrationFields;\r\n        },\r\n        async createWebcastRegistrationField(registrationField: RegistrationField.Request): Promise<string> {\r\n            const response = await rev.post('/api/v2/accounts/webcast-registration-fields', registrationField);\r\n            return response.fieldId;\r\n        },\r\n        async updateWebcastRegistrationField(fieldId: string, registrationField: Partial<RegistrationField.Request>): Promise<void> {\r\n            return rev.put(`/api/v2/accounts/webcast-registration-fields/${fieldId}`, registrationField);\r\n        },\r\n        async deleteWebcastRegistrationField(fieldId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/accounts/webcast-registration-fields/${fieldId}`);\r\n        },\r\n        listIQCreditsUsage(query: { startDate?: string | Date, endDate?: string | Date }, options?: Rev.SearchOptions<Admin.IQCreditsSession>): SearchRequest<Admin.IQCreditsSession> {\r\n            const searchDefinition: Rev.SearchDefinition<Admin.IQCreditsSession> = {\r\n                endpoint: `/api/v2/analytics/accounts/iq-credits-usage`,\r\n                totalKey: 'total',\r\n                hitsKey: 'sessions'\r\n            };\r\n            return new SearchRequest<Admin.IQCreditsSession>(rev, searchDefinition, query, options);\r\n        },\r\n        /**\r\n        * get system health - returns 200 if system is active and responding, otherwise throws error\r\n        */\r\n        async verifySystemHealth(): Promise<boolean> {\r\n            await rev.get('/api/v2/system-health');\r\n            return true;\r\n        },\r\n        /**\r\n        * gets list of scheduled maintenance windows\r\n        */\r\n        async maintenanceSchedule(): Promise<{start: string, end: string}[]> {\r\n            const {schedules} = await rev.get('/api/v2/maintenance-schedule');\r\n            return schedules;\r\n        },\r\n        /**\r\n         * gets the user location service URL\r\n         */\r\n        async userLocationService(): Promise<{ enabled: boolean, locationUrls: string[] }> {\r\n            return rev.get('/api/v2/user-location');\r\n        },\r\n        /**\r\n         * returns an array of all expiration rules\r\n         */\r\n        async expirationRules(): Promise<Admin.ExpirationRule[]> {\r\n            return rev.get('/api/v2/expiration-rules');\r\n        }\r\n    };\r\n    return adminAPI;\r\n}\r\n","/**\r\n * simple helper function to parse CSV data into JSON\r\n */\r\nexport function parseCSV(raw: string) {\r\n    raw = raw.replace(/(\\r\\n|\\n|\\r)/gm, '\\n').replace(/\\n$/g, '');\r\n\r\n    let cur = '';\r\n    let inQuote = false;\r\n    let fieldQuoted = false;\r\n    let field: string | undefined = '';\r\n    let row: (string | undefined)[] = [];\r\n    let out: (string | undefined)[][] = [];\r\n    let i: number;\r\n    const n = raw.length;\r\n\r\n    function processField(field: string) {\r\n        if (fieldQuoted) { return field; }\r\n        if (field === '') { return undefined; }\r\n        return field.trim();\r\n    }\r\n\r\n    for (i = 0; i < n; i += 1) {\r\n        cur = raw.charAt(i);\r\n\r\n        if (!inQuote && (cur === ',' || cur === '\\n')) {\r\n            field = processField(field);\r\n            row.push(field);\r\n            if (cur === '\\n') {\r\n                out.push(row);\r\n                row = [];\r\n            }\r\n            field = '';\r\n            fieldQuoted = false;\r\n        } else if (cur === '\"') {\r\n            if (!inQuote) {\r\n                inQuote = true;\r\n                fieldQuoted = true;\r\n            } else {\r\n                if (raw.charAt(i + 1) === '\"') {\r\n                    field += '\"';\r\n                    i += 1;\r\n                } else {\r\n                    inQuote = false;\r\n                }\r\n            }\r\n        } else {\r\n            field += cur === '\\n' ? '\\n' : cur;\r\n        }\r\n    }\r\n\r\n    // Add the last field\r\n    field = processField(field);\r\n    row.push(field);\r\n    out.push(row);\r\n\r\n    const headers: string[] = out.shift() as string[];\r\n    return out\r\n        .map((line: (string | undefined)[]) => {\r\n            const obj: Record<string, string> = { };\r\n            line\r\n                .forEach((field, i) => {\r\n                    if (field !== undefined) {\r\n                        obj[headers[i]] = field;\r\n                    }\r\n                });\r\n            return obj;\r\n        });\r\n}\r\n","import { RevClient } from '..';\r\nimport { Audit } from '../types';\r\nimport { asValidDate, tryParseJson } from '../utils';\r\nimport { IPageResponse, PagedRequest } from '../utils/paged-request';\r\nimport { parseCSV } from '../utils/parse-csv';\r\n\r\nfunction parseEntry<T extends Audit.Entry>(line: Record<string, any>): T {\r\n    return {\r\n        messageKey: line['MessageKey'],\r\n        entityKey: line['EntityKey'],\r\n        when: line['When'],\r\n        principal: tryParseJson(line['Principal']) || {},\r\n        message: tryParseJson(line['Message']) || {},\r\n        currentState: tryParseJson(line['CurrentState']) || {},\r\n        previousState: tryParseJson(line['PreviousState']) || {}\r\n    } as T;\r\n}\r\n\r\nexport class AuditRequest<T extends Audit.Entry> extends PagedRequest<T> {\r\n    declare options: Required<Omit<Audit.Options<T>, 'toDate' | 'fromDate'>>;\r\n    private params: {\r\n        toDate?: string,\r\n        fromDate?: string,\r\n        nextContinuationToken?: string;\r\n    }\r\n    private _req: () => Promise<IPageResponse<T>>;\r\n    constructor(\r\n        rev: RevClient,\r\n        endpoint: string,\r\n        label: string = 'audit records',\r\n        {toDate, fromDate, ...options}: Audit.Options<T> = {}\r\n    ) {\r\n        super({\r\n            onProgress: (items: T[], current: number, total?: number | undefined) => {\r\n                rev.log('debug', `loading ${label}, ${current} of ${total}...`);\r\n            },\r\n            ...options\r\n        });\r\n\r\n        const {from, to} = this._parseDates(fromDate, toDate);\r\n\r\n        this.params = {\r\n            toDate: to.toISOString(),\r\n            fromDate: from.toISOString()\r\n        };\r\n\r\n        this._req = this._buildReqFunction(rev, endpoint);\r\n    }\r\n    protected _requestPage() { return this._req(); }\r\n    private _buildReqFunction(rev: RevClient, endpoint: string) {\r\n        return async () => {\r\n            const response = await rev.request('GET', endpoint, { params: this.params }, { responseType: 'text' });\r\n\r\n            const {\r\n                body,\r\n                headers\r\n            } = response;\r\n\r\n            let items = parseCSV(body)\r\n                .map(line => parseEntry<T>(line));\r\n\r\n            const total = parseInt(headers.get('totalRecords') || '', 10);\r\n\r\n            Object.assign(this.params, {\r\n                nextContinuationToken: headers.get('nextContinuationToken') || undefined,\r\n                fromDate: headers.get('nextfromDate') || undefined\r\n            });\r\n\r\n            let done = !this.params.nextContinuationToken;\r\n\r\n\r\n            return {\r\n                items,\r\n                total,\r\n                done\r\n            } as IPageResponse<T>;\r\n        }\r\n    }\r\n    private _parseDates(fromDate?: Date | string, toDate?: Date | string) {\r\n        let to = asValidDate(toDate, new Date());\r\n\r\n        // default to one year older than toDate\r\n        const defaultFrom = new Date(to.setFullYear(to.getFullYear() - 1));\r\n\r\n        let from = asValidDate(fromDate, defaultFrom);\r\n\r\n        if (to < from) {\r\n            [to, from] = [from, to];\r\n        }\r\n        return {from, to};\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Audit } from '../types';\r\nimport { AuditRequest } from './audit-request';\r\n\r\nexport default function auditAPIFactory(rev: RevClient) {\r\n    const auditAPI = {\r\n        /**\r\n        * Logs of user login / logout / failed login activity\r\n        */\r\n        accountAccess(accountId: string, options?: Audit.Options<Audit.UserAccessEntry>) {\r\n            return new AuditRequest<Audit.UserAccessEntry>(rev, `/network/audit/accounts/${accountId}/userAccess`, 'UserAccess', options);\r\n        },\r\n        userAccess(userId: string, accountId: string, options?: Audit.Options<Audit.UserAccessEntry>) {\r\n            return new AuditRequest<Audit.UserAccessEntry>(rev, `/network/audit/accounts/${accountId}/userAccess/${userId}`, `UserAccess_${userId}`, options);\r\n        },\r\n        /**\r\n        * Operations on User Records (create, delete, etc)\r\n        */\r\n        accountUsers(accountId: string, options?: Audit.Options<Audit.UserEntry>) {\r\n            return new AuditRequest<Audit.UserEntry>(rev, `/network/audit/accounts/${accountId}/users`, 'User', options);\r\n        },\r\n        user(userId: string, accountId: string, options?: Audit.Options<Audit.UserEntry>) {\r\n            return new AuditRequest<Audit.UserEntry>(rev, `/network/audit/accounts/${accountId}/users/${userId}`, 'User', options);\r\n        },\r\n        /**\r\n        * Operations on Group Records (create, delete, etc)\r\n        */\r\n        accountGroups(accountId: string, options?: Audit.Options<Audit.GroupEntry>) {\r\n            return new AuditRequest<Audit.GroupEntry>(rev, `/network/audit/accounts/${accountId}/groups`, 'Groups', options);\r\n        },\r\n        group(groupId: string, accountId: string, options?: Audit.Options<Audit.GroupEntry>) {\r\n            return new AuditRequest<Audit.GroupEntry>(rev, `/network/audit/accounts/${accountId}/groups/${groupId}`, 'Group', options);\r\n        },\r\n        /**\r\n        * Operations on Device Records (create, delete, etc)\r\n        */\r\n        accountDevices(accountId: string, options?: Audit.Options<Audit.DeviceEntry>) {\r\n            return new AuditRequest<Audit.DeviceEntry>(rev, `/network/audit/accounts/${accountId}/devices`, 'Devices', options);\r\n        },\r\n        device(deviceId: string, accountId: string, options?: Audit.Options<Audit.DeviceEntry>) {\r\n            return new AuditRequest<Audit.DeviceEntry>(rev, `/network/audit/accounts/${accountId}/devices/${deviceId}`, 'Device', options);\r\n        },\r\n        /**\r\n        * Operations on Video Records (create, delete, etc)\r\n        */\r\n        accountVideos(accountId: string, options?: Audit.Options<Audit.VideoEntry>) {\r\n            return new AuditRequest<Audit.VideoEntry>(rev, `/network/audit/accounts/${accountId}/videos`, 'Videos', options);\r\n        },\r\n        video(videoId: string, accountId: string, options?: Audit.Options<Audit.VideoEntry>) {\r\n            return new AuditRequest<Audit.VideoEntry>(rev, `/network/audit/accounts/${accountId}/videos/${videoId}`, 'Video', options);\r\n        },\r\n        /**\r\n        * Operations on Webcast Records (create, delete, etc)\r\n        */\r\n        accountWebcasts(accountId: string, options?: Audit.Options<Audit.WebcastEntry>) {\r\n            return new AuditRequest<Audit.WebcastEntry>(rev, `/network/audit/accounts/${accountId}/scheduledEvents`, 'Webcasts', options);\r\n        },\r\n        webcast(eventId: string, accountId: string, options?: Audit.Options<Audit.WebcastEntry>) {\r\n            return new AuditRequest<Audit.WebcastEntry>(rev, `/network/audit/accounts/${accountId}/scheduledEvents/${eventId}`, `Webcast`, options);\r\n        },\r\n        /**\r\n        * All operations a single user has made\r\n        */\r\n        principal(userId: string, accountId: string, options?: Audit.Options<Audit.Entry<string>>) {\r\n            return new AuditRequest<Audit.Entry<string>>(rev, `/network/audit/accounts/${accountId}/principals/${userId}`, 'Principal', options);\r\n        }\r\n    };\r\n\r\n    return auditAPI;\r\n}\r\n","import type { OAuth } from '../types/auth';\r\nimport polyfills from '../interop';\r\nimport type { Rev } from '../types/rev';\r\n\r\nconst PLACEHOLDER = 'http://rev';\r\n\r\nexport function getOAuth2AuthorizationUrl(config: OAuth.ServerConfig, code_challenge: string, state?: string) {\r\n    // construct URL with query params\r\n    const url = new URL('/api/v2/oauth2/authorize', config.revUrl);\r\n    url.search = new URLSearchParams({\r\n        client_id: config.oauthApiKey,\r\n        code_challenge,\r\n        response_type: 'code',\r\n        redirect_uri: config.redirectUri,\r\n        ...state && {state}\r\n    }).toString();\r\n\r\n    return url.toString();\r\n}\r\n\r\n/**\r\n *\r\n * @param codeVerifier value can be any string 43-128 characters in length, just these characters: [A-Za-z0-9._~-]\r\n */\r\nexport async function getOAuth2PKCEVerifier(codeVerifier = polyfills.randomValues(48)) {\r\n    // setup pkce\r\n    // value can be any string 43-128 characters in length, just these characters: [A-Za-z0-9._~-]\r\n    // this line uses random values to create 64char string\r\n    const codeChallenge = await polyfills.sha256Hash(codeVerifier);\r\n    return { codeVerifier, codeChallenge };\r\n}\r\n\r\n/**\r\n * Constructs the query parameters for the Rev /oauth/authorization endpoint\r\n * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page, along with revUrl\r\n * @param state optional state to pass back to redirectUri once complete\r\n * @returns A valid oauth flow endpoint + query\r\n */\r\nexport async function buildLegacyOAuthQuery(config: OAuth.Config, oauthSecret: string, state: string = '1') {\r\n    const { hmacSign } = polyfills;\r\n\r\n    const RESPONSE_TYPE = 'code';\r\n\r\n    const {\r\n        oauthApiKey: apiKey,\r\n        redirectUri\r\n    } = config;\r\n\r\n    const timestamp = new Date();\r\n    const verifier = `${apiKey}::${timestamp.toISOString()}`;\r\n\r\n    const signature = await hmacSign(verifier, oauthSecret);\r\n\r\n    return {\r\n        apiKey,\r\n        signature,\r\n        verifier,\r\n        'redirect_uri': redirectUri,\r\n        'response_type': RESPONSE_TYPE,\r\n        state\r\n    };\r\n}\r\n\r\n/**\r\n * Parse the query parameters returned to the redirectUri from Rev\r\n * @param url The URL with query parameters, or object with the query parrameters\r\n * @returns\r\n */\r\nexport function parseLegacyOAuthRedirectResponse(url: string | URL | URLSearchParams | Record<string, string>): OAuth.RedirectResponse {\r\n    if (typeof url === 'string') {\r\n        // just in case only the query string is returned, include base\r\n        url = new URL(url, PLACEHOLDER);\r\n    }\r\n\r\n    if (url instanceof URL) {\r\n        url = url.searchParams;\r\n    }\r\n\r\n    const query: Record<string, string> = (url instanceof URLSearchParams)\r\n        ? Object.fromEntries(url)\r\n        : url;\r\n\r\n    const {\r\n        'auth_code': authCode = '',\r\n        state = '',\r\n        error = undefined\r\n    } = query;\r\n\r\n    return {\r\n        isSuccess: !error,\r\n        // URL parsing parses pluses (+) as spaces, which can cause later validation to fail\r\n        authCode: `${authCode}`.replace(/ /g, '+'),\r\n        state,\r\n        error\r\n    };\r\n}\r\n\r\n/**\r\n * Format the oauth configuration and oauth response into the constructor arguments for RevClient\r\n * @param revUrl\r\n * @param config\r\n * @param response\r\n * @returns {Rev.Options}\r\n */\r\nexport function buildLegacyOAuthRevOptions(revUrl: string, config: OAuth.Config, response: OAuth.RedirectResponse): Rev.Options {\r\n    const {\r\n        oauthApiKey,\r\n        redirectUri\r\n    } = config;\r\n\r\n    const {\r\n        authCode\r\n    } = response;\r\n\r\n    return {\r\n        url: revUrl,\r\n        authCode,\r\n        oauthConfig: {\r\n            oauthApiKey,\r\n            redirectUri\r\n        }\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { Auth, OAuth } from '../types/auth';\r\nimport {buildLegacyOAuthQuery, getOAuth2AuthorizationUrl, getOAuth2PKCEVerifier, parseLegacyOAuthRedirectResponse} from './oauth';\r\n\r\nexport default function authAPIFactory(rev: RevClient) {\r\n\r\n    const authAPI = {\r\n        async loginToken(apiKey: string, secret: string): Promise<Auth.LoginResponse> {\r\n            return rev.post('/api/v2/authenticate', {\r\n                apiKey,\r\n                secret\r\n            });\r\n        },\r\n        async extendSessionToken(apiKey: string): Promise<Auth.ExtendResponse> {\r\n            return rev.post(`/api/v2/auth/extend-session-timeout/${apiKey}`);\r\n        },\r\n        async logoffToken(apiKey: string): Promise<void> {\r\n            return rev.delete(`/api/v2/tokens/${apiKey}`);\r\n        },\r\n        async loginUser(username: string, password: string): Promise<Auth.UserLoginResponse> {\r\n            return rev.post('/api/v2/user/login', {\r\n                username,\r\n                password\r\n            });\r\n        },\r\n        async logoffUser(userId: string): Promise<void> {\r\n            return rev.post('/api/v2/user/logoff', { userId });\r\n        },\r\n        async extendSessionUser(userId: string): Promise<Auth.ExtendResponse> {\r\n            return rev.post('/api/v2/user/extend-session-timeout', { userId });\r\n        },\r\n        async loginJWT(jwtToken: string): Promise<Auth.JWTLoginResponse> {\r\n            return rev.get('/api/v2/jwtauthenticate', { jwt_token: jwtToken });\r\n        },\r\n        async extendSession(): Promise<Auth.ExtendResponse> {\r\n            return rev.post('/api/v2/user/extend-session');\r\n        },\r\n        async verifySession(): Promise<void> {\r\n            return rev.get('/api/v2/user/session');\r\n        },\r\n\r\n        /**\r\n         * @deprecated - use logoffUser - put here because it's a common misspelling\r\n         */\r\n        get logoutUser() { return authAPI.logoffUser; },\r\n        /**\r\n         * @deprecated - use logoffToken - put here because it's a common misspelling\r\n         */\r\n        get logoutToken() { return authAPI.logoffToken; },\r\n        /**\r\n         * generate the Authorization URL for the OAuth2 flow as well as the codeVerifier for the\r\n         * subsequent Access Token request. You *must* store the codeVerifier somehow (i.e. serverside database matched to user's state/cookies/session, or on browser SessionStorage) to be able to complete the OAuth2 login flow.\r\n         * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page\r\n         * @param oauthSecret Secret from Rev Admin -> Security. This is a DIFFERENT value from the\r\n         *                    User Secret used for API login. Do not expose client-side!\r\n         * @param state optional state to pass back to redirectUri once complete\r\n         * @param verifier the code_verifier to use when generating the code challenge. Can be any string 43-128 characters in length, just these characters: [A-Za-z0-9._~-]. If not provided then code will automatically generate a suitable value\r\n         * @returns A valid oauth flow URL + the code_verifier to save for later verification\r\n         */\r\n        async buildOAuth2Authentication(config: OAuth.ServerConfig, state: string = '1', verifier?: string): Promise<OAuth.AuthenticationData> {\r\n            const {codeChallenge, codeVerifier} = await getOAuth2PKCEVerifier(verifier);\r\n            const url = getOAuth2AuthorizationUrl(config, codeChallenge, state);\r\n            return {\r\n                url: `${url}`,\r\n                codeVerifier\r\n            };\r\n        },\r\n        async loginOAuth2(config: OAuth.Config, code: string, codeVerifier: string): Promise<OAuth.AuthTokenResponse> {\r\n            return rev.post('/api/v2/oauth2/token', {\r\n                // sometimes the authCode can get mangled, with the pluses in the code being replaced by spaces.\r\n                code: code.replace(/ /g, '+'),\r\n                client_id: config.oauthApiKey,\r\n                grant_type: 'authorization_code',\r\n                redirect_uri: config.redirectUri,\r\n                code_verifier: codeVerifier\r\n            });\r\n        },\r\n        /**\r\n         * @deprecated\r\n         * @param config OAuth signing settings, retrieved from Rev Admin -> Security -> API Keys page\r\n         * @param oauthSecret Secret from Rev Admin -> Security. This is a DIFFERENT value from the\r\n         *                    User Secret used for API login. Do not expose client-side!\r\n         * @param state optional state to pass back to redirectUri once complete\r\n         * @returns A valid oauth flow URL\r\n         */\r\n        async buildOAuthAuthenticationURL(config: OAuth.Config, oauthSecret: string, state: string = '1'): Promise<string> {\r\n            const query = await buildLegacyOAuthQuery(config, oauthSecret, state);\r\n            const url = new URL('/api/v2/oauth/authorization', rev.url);\r\n            url.search = `${new URLSearchParams(query)}`;\r\n            return `${url}`;\r\n        },\r\n        /**\r\n         * @deprecated\r\n         */\r\n        buildOAuthAuthenticationQuery: buildLegacyOAuthQuery,\r\n        /**\r\n         * @deprecated\r\n         */\r\n        parseOAuthRedirectResponse: parseLegacyOAuthRedirectResponse,\r\n        /**\r\n         * @deprecated\r\n         * @param config\r\n         * @param authCode\r\n         * @returns\r\n         */\r\n        async loginOAuth(config: OAuth.Config, authCode: string): Promise<OAuth.LoginResponse> {\r\n            const GRANT_AUTH = 'authorization_code';\r\n\r\n            const {\r\n                oauthApiKey: apiKey,\r\n                redirectUri\r\n            } = config;\r\n\r\n            // sometimes the authCode can get mangled, with the pluses in the code\r\n            // being replaced by spaces. This is just to make sure that isn't a problem (even though already done in parseOAuthRedirectResponse)\r\n            authCode = authCode.replace(/ /g, '+');\r\n\r\n            // COMBAK I don't think it matters if rev-client is logged in and passing Authorization headers or not.\r\n            return rev.post('/api/v2/oauth/token', {\r\n                authCode,\r\n                apiKey,\r\n                redirectUri,\r\n                grantType: GRANT_AUTH\r\n            });\r\n        },\r\n        /**\r\n         * @deprecated\r\n         * @param config\r\n         * @param refreshToken\r\n         * @returns\r\n         */\r\n        async extendSessionOAuth(config: OAuth.Config, refreshToken: string): Promise<OAuth.LoginResponse> {\r\n            const GRANT_REFRESH = 'refresh_token';\r\n\r\n            const {\r\n                oauthApiKey: apiKey\r\n            } = config;\r\n\r\n            return rev.post('/api/v2/oauth/token', {\r\n                apiKey,\r\n                refreshToken,\r\n                grantType: GRANT_REFRESH\r\n            });\r\n        }\r\n    };\r\n\r\n    return authAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Category } from '../types';\r\n\r\nexport default function categoryAPIFactory(rev: RevClient) {\r\n    const categoryAPI = {\r\n        async create(category: Category.CreateRequest): Promise<Category.CreateResponse> {\r\n            return rev.post('/api/v2/categories', category, { responseType: 'json' });\r\n        },\r\n        async details(categoryId: string): Promise<Category.Details> {\r\n            return rev.get(`/api/v2/categories/${categoryId}`, undefined, { responseType: 'json' });\r\n        },\r\n        async update(categoryId: string, category: Category.EditRequest): Promise<void> {\r\n            return rev.put(`/api/v2/categories/${categoryId}`, category);\r\n        },\r\n        async delete(categoryId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/categories/${categoryId}`);\r\n        },\r\n        /**\r\n         * get list of categories in system\r\n         * @see {@link https://revdocs.vbrick.com/reference#getcategories}\r\n         */\r\n        async list(parentCategoryId?: string, includeAllDescendants?: boolean): Promise<Category[]> {\r\n            // only pass parameters if defined\r\n            const payload: Record<string, any> = Object.assign(\r\n                { },\r\n                parentCategoryId && { parentCategoryId },\r\n                includeAllDescendants != undefined && { includeAllDescendants }\r\n            );\r\n            const { categories } = await rev.get('/api/v2/categories', payload, { responseType: 'json' });\r\n            return categories;\r\n        },\r\n        /**\r\n         * get list of categories that current user has ability to add videos to\r\n         */\r\n        async listAssignable(): Promise<Category.Assignable[]> {\r\n            return rev.get('/api/v2/assignable-categories');\r\n        }\r\n    };\r\n    return categoryAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Channel, Rev } from '../types';\r\n\r\nexport default function channelAPIFactory(rev: RevClient) {\r\n    const channelAPI = {\r\n        async create(channel: Channel.CreateRequest): Promise<string> {\r\n            const {channelId} = await rev.post('/api/v2/channels', channel, { responseType: 'json' });\r\n            return channelId;\r\n        },\r\n        async update(channelId: string, channel: Channel.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/channels/${channelId}`, channel);\r\n        },\r\n        async delete(channelId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/channels/${channelId}`);\r\n        },\r\n        /**\r\n         * get list of channels in system\r\n         * @see {@link https://revdocs.vbrick.com/reference/getchannels}\r\n         */\r\n        list(start: number = 0, options: Channel.SearchOptions = {}): ChannelListRequest {\r\n            return new ChannelListRequest(rev, start, options);\r\n        },\r\n        async addMembers(channelId: string, members: Channel.Member[]) {\r\n            const operations = members\r\n                .map(member => {\r\n                    return { op: 'add', path: '/Members/-', value: member };\r\n                });\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations);\r\n        },\r\n        async removeMembers(channelId: string, members: Array<string | Channel.Member>) {\r\n            const operations = members\r\n                .map(member => {\r\n                    const entityId = typeof member === 'string'\r\n                        ? member\r\n                        : member.id;\r\n\r\n                    return { op: 'remove', path: '/Members', value: entityId };\r\n                });\r\n\r\n            await rev.patch(`/api/v2/channels/${channelId}`, operations);\r\n        }\r\n    };\r\n    return channelAPI;\r\n}\r\n\r\nexport class ChannelListRequest implements Rev.ISearchRequest<Channel.SearchHit> {\r\n    currentPage: number;\r\n    current: number;\r\n    total: number;\r\n    done: boolean;\r\n    options: Required<Pick<Channel.SearchOptions, 'maxResults' | 'onProgress' | 'pageSize'>>;\r\n    private _req: () => Promise<Channel.SearchHit[]>;\r\n    constructor(rev: RevClient, start: number = 0, options: Channel.SearchOptions = {}) {\r\n        this.options = {\r\n            maxResults: Infinity,\r\n            pageSize: 10,\r\n            onProgress: (items: Channel.SearchHit[], current: number, total: number) => {\r\n                rev.log('debug', `loading channels, ${current} of ${total}...`);\r\n            },\r\n            ...options\r\n        };\r\n\r\n        this.current = 0;\r\n        this.total = Infinity;\r\n        this.done = false;\r\n        this.currentPage = start;\r\n\r\n        this._req = () => {\r\n            const params = {\r\n                page: this.currentPage,\r\n                size: this.options.pageSize\r\n            };\r\n            return rev.get('/api/v2/channels', params, { responseType: 'json' });\r\n        }\r\n\r\n    }\r\n    async nextPage() {\r\n        const {\r\n            maxResults,\r\n            onProgress\r\n        } = this.options;\r\n\r\n        let current = this.current;\r\n\r\n        let items: Channel.SearchHit[] = await this._req();\r\n\r\n        if (!Array.isArray(items) || items.length == 0) {\r\n            this.done = true;\r\n            items = [];\r\n        }\r\n\r\n        if (current + items.length >= maxResults) {\r\n            const delta = maxResults - current;\r\n            items = items.slice(0, delta);\r\n            this.done = true;\r\n        }\r\n        this.total = current + items.length;\r\n\r\n        onProgress(items, current, this.total);\r\n\r\n        this.current += items.length;\r\n        this.currentPage += 1;\r\n\r\n        return {\r\n            current,\r\n            total: this.total,\r\n            done: this.done,\r\n            items\r\n        };\r\n    }\r\n    /**\r\n     * Go through all pages of results and return as an array.\r\n     * TIP: Use the {maxResults} option to limit the maximum number of results\r\n     *\r\n     */\r\n    async exec(): Promise<Channel.SearchHit[]> {\r\n        const results: Channel.SearchHit[] = [];\r\n        // use async iterator\r\n        for await (let hit of this) {\r\n            results.push(hit);\r\n        }\r\n        return results;\r\n    }\r\n    async* [Symbol.asyncIterator]() {\r\n        do {\r\n            const {\r\n                items\r\n            } = await this.nextPage();\r\n\r\n            for await (let hit of items) {\r\n                yield hit;\r\n            }\r\n        } while (!this.done);\r\n    }\r\n}\r\n","import type { RevClient } from '../rev-client';\r\n\r\nimport type { Device } from '../types';\r\n\r\nexport default function deviceAPIFactory(rev: RevClient) {\r\n    const deviceAPI = {\r\n        async listDMEs(): Promise<Device.DmeDetails[]> {\r\n            const response = await rev.get('/api/v2/devices/dmes');\r\n            return response.devices;\r\n        },\r\n        async listZoneDevices(): Promise<Device.ZoneDevice[]> {\r\n            const response = await rev.get('/api/v2/zonedevices');\r\n            return response.devices;\r\n        },\r\n        async listPresentationProfiles(): Promise<Device.PresentationProfile[]> {\r\n            return rev.get('/api/v2/presentation-profiles');\r\n        },\r\n        async add(dme: Device.CreateDMERequest) {\r\n            return rev.post('/api/v2/devices/dmes', dme);\r\n        },\r\n        async healthStatus(deviceId: string): Promise<Device.DmeHealthStatus> {\r\n            return rev.get(`/api/v2/devices/dmes/${deviceId}/health-status`);\r\n        },\r\n        async delete(deviceId: string) {\r\n            return rev.delete(`/api/v2/devices/dmes/${deviceId}`);\r\n        },\r\n        async rebootDME(deviceId: string) {\r\n            return rev.put(`/api/v2/devices/dmes/${deviceId}`);\r\n        }\r\n    };\r\n    return deviceAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Group, Rev, User } from '../types';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nexport default function groupAPIFactory(rev: RevClient) {\r\n    const groupAPI = {\r\n        /**\r\n         * Create a group. Returns the resulting Group ID\r\n         * @param {{name: string, userIds: string[], roleIds: string[]}} group\r\n         * @returns {Promise<string>}\r\n         */\r\n        async create(group: Group.CreateRequest) {\r\n            const { groupId } = await rev.post('/api/v2/groups', group);\r\n            return groupId;\r\n        },\r\n        async delete(groupId: string) {\r\n            await rev.delete(`/api/v2/groups/${groupId}`);\r\n        },\r\n        async details(groupId: string): Promise<Group.Details> {\r\n            return rev.get(`/api/v2/groups/${groupId}`);\r\n        },\r\n        /**\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.SearchOptions<Group.SearchHit> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/search/access-entity',\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities',\r\n                transform: (hits: Group.RawSearchHit[]) => hits.map(formatGroupSearchHit)\r\n            };\r\n            const query: Record<string, any> = { type: 'group' };\r\n            if (searchText) {\r\n                query.q = searchText;\r\n            }\r\n            return new SearchRequest<Group.SearchHit>(rev, searchDefinition, query, options);\r\n        },\r\n        list(options: Rev.SearchOptions<Group.SearchHit> = { }) {\r\n            return groupAPI.search(undefined, options);\r\n        },\r\n        listUsers(groupId: string, options: Rev.SearchOptions<string> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/groups/${groupId}/users`,\r\n                totalKey: 'totalUsers',\r\n                hitsKey: 'userIds'\r\n            };\r\n            return new SearchRequest<string>(rev, searchDefinition, undefined, options);\r\n        },\r\n        /**\r\n         * get all users in a group with full details\r\n         * @param groupId\r\n         * @param options\r\n         * @returns\r\n         */\r\n        listUserDetails(groupId: string, options: Rev.SearchOptions<User & { error?: Error }> = { }) {\r\n            const searchDefinition = {\r\n                endpoint: `/api/v2/search/groups/${groupId}/users`,\r\n                totalKey: 'totalUsers',\r\n                hitsKey: 'userIds',\r\n                transform: async (userIds: string[]) => {\r\n                    const result: User[] = [];\r\n                    for (let userId of userIds) {\r\n                        const out: User & {error: Error} = { userId } as any;\r\n                        try {\r\n                            const details = await rev.user.details(userId);\r\n                            Object.assign(out, details);\r\n                        } catch (error: any) {\r\n                            out.error = error;\r\n                        }\r\n                        result.push(out);\r\n                    }\r\n                    return result;\r\n                }\r\n            };\r\n            return new SearchRequest<User & {userId: string, error?: Error}>(rev, searchDefinition, undefined, options);\r\n        }\r\n    };\r\n    return groupAPI;\r\n}\r\n\r\nfunction formatGroupSearchHit(hit: Group.RawSearchHit): Group.SearchHit {\r\n    return {\r\n        id: hit.Id,\r\n        name: hit.Name,\r\n        entityType: hit.EntityType\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Playlist } from '../types/playlist';\r\nimport { isPlainObject } from '../utils';\r\n\r\nexport default function playlistAPIFactory(rev: RevClient) {\r\n    const playlistAPI = {\r\n        async create(name: string, videoIds: string[]): Promise<string> {\r\n            const payload = {\r\n                name,\r\n                videoIds\r\n            };\r\n            const { playlistId } = await rev.post('/api/v2/playlists', payload, { responseType: 'json' });\r\n            return playlistId;\r\n        },\r\n        async update(playlistId: string, actions: Playlist.UpdateAction[]): Promise<void> {\r\n            const payload = {\r\n                playlistVideoDetails: actions\r\n            };\r\n            return rev.put(`/api/v2/playlists/${playlistId}`, payload);\r\n        },\r\n        async updateFeatured(actions: Playlist.UpdateAction[]): Promise<void> {\r\n            const payload = {\r\n                playlistVideoDetails: actions\r\n            };\r\n            return rev.put(`/api/v2/playlists/featured-playlist`, payload);\r\n        },\r\n        async delete(playlistId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/playlists/${playlistId}`);\r\n        },\r\n        /**\r\n         * get list of playlists in system.\r\n         * NOTE: return type is slightly different than API documentation\r\n         * @see {@link https://revdocs.vbrick.com/reference#getplaylists}\r\n         */\r\n        async list(): Promise<Playlist.List> {\r\n            // ensure raw response is in consistent format\r\n            function parsePlaylist(entry: Record<string, string> & { videos: any; }): Playlist {\r\n                return {\r\n                    id: entry.id ?? entry.playlistId ?? entry.featurePlaylistId ?? entry.featuredPlaylist,\r\n                    name: entry.name ?? entry.playlistName,\r\n                    playbackUrl: entry.playbackUrl,\r\n                    videos: entry.videos ?? entry.Videos as any\r\n                };\r\n            }\r\n\r\n            const rawResult = await rev.get('/api/v2/playlists', { responseType: 'json' });\r\n            // rawResult may return in strange format, so cleanup and return consistent output\r\n\r\n            const hasFeatured = !Array.isArray(rawResult);\r\n\r\n            const rawPlaylists = hasFeatured\r\n                ? rawResult.playlists\r\n                : rawResult;\r\n\r\n\r\n            const output: Playlist.List = {\r\n                playlists: rawPlaylists.map(parsePlaylist)\r\n            };\r\n\r\n            if (hasFeatured) {\r\n                if (isPlainObject(rawResult.featuredPlaylist)) {\r\n                    output.featuredPlaylist = parsePlaylist(rawResult.featuredPlaylist);\r\n                } else if (Array.isArray(rawResult.videos)) {\r\n                    output.featuredPlaylist = parsePlaylist(rawResult);\r\n                }\r\n            }\r\n            return output;\r\n        }\r\n    };\r\n    return playlistAPI;\r\n}\r\n","import { Recording } from '..';\r\nimport type { RevClient } from '../rev-client';\r\nimport { Video } from '../types/video';\r\nimport { isPlainObject } from '../utils';\r\n\r\nexport default function recordingAPIFactory(rev: RevClient) {\r\n    const recordingAPI = {\r\n        async startVideoConferenceRecording(sipAddress: string, sipPin: string, title?: string): Promise<string> {\r\n            const { videoId } = await rev.post('/api/v2/vc/start-recording', { title, sipAddress, sipPin }, { responseType: 'json' });\r\n            return videoId;\r\n        },\r\n        async getVideoConferenceStatus(videoId: string): Promise<Video.StatusEnum> {\r\n            const { status } = await rev.get(`/api/v2/vc/recording-status/${videoId}`, undefined, { responseType: 'json' });\r\n            return status;\r\n        },\r\n        async stopVideoConferenceRecording(videoId: string): Promise<string> {\r\n            const payload = { videoId };\r\n            const result = await rev.post(`/api/v2/vc/stop-recording`, payload, { responseType: 'json' });\r\n            return isPlainObject<{ message: string; }>(result)\r\n                ? result.message\r\n                : result;\r\n        },\r\n        async startPresentationProfileRecording(request: Recording.PresentationProfileRequest): Promise<string> {\r\n            const { scheduledRecordingId } = await rev.post('/api/v2/pp/start-recording', request, { responseType: 'json' });\r\n            return scheduledRecordingId;\r\n        },\r\n        async getPresentationProfileStatus(recordingId: string): Promise<Recording.PresentationProfileStatus> {\r\n            const result = await rev.get(`/api/v2/pp/recording-status/${recordingId}`, undefined, { responseType: 'json' });\r\n            return result;\r\n        },\r\n        async stopPresentationProfileRecording(recordingId: string): Promise<Recording.StopPresentationProfileResponse> {\r\n            const payload = { scheduledRecordingId: recordingId };\r\n            const result = await rev.get(`/api/v2/vc/recording-status`, payload, { responseType: 'json' });\r\n            return result;\r\n        }\r\n    };\r\n    return recordingAPI;\r\n}\r\n","import polyfills from '../interop';\r\nimport { isBlobLike } from './is-utils';\r\nimport type { RevClient } from '../rev-client';\r\nimport type { Rev } from '../types';\r\n\r\nexport type FileUploadType = string | File | Blob | AsyncIterable<any>;\r\nexport interface UploadFileOptions {\r\n    /** specify filename of video as reported to Rev */\r\n    filename?: string;\r\n    /** specify content type of video */\r\n    contentType?: string;\r\n    /** if content length is known this will avoid needing to detect it */\r\n    contentLength?: number;\r\n    /** node-only - bypass dealing with content length and just upload as transfer-encoding: chunked */\r\n    useChunkedTransfer?: boolean;\r\n    /** An AbortSignal to set request's signal. */\r\n    signal?: AbortSignal | null;\r\n}\r\nexport interface FileUploadPayloadInternal {\r\n    file: FileUploadType;\r\n    options: UploadFileOptions;\r\n}\r\n\r\nexport const mimeTypes = {\r\n    '.7z': 'application/x-7z-compressed',\r\n    '.asf': 'video/x-ms-asf',\r\n    '.avi': 'video/x-msvideo',\r\n    '.csv': 'text/csv',\r\n    '.doc': 'application/msword',\r\n    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    '.f4v': 'video/x-f4v',\r\n    '.flv': 'video/x-flv',\r\n    '.gif': 'image/gif',\r\n    '.jpg': 'image/jpeg',\r\n    '.m4a': 'audio/mp4',\r\n    '.m4v': 'video/x-m4v',\r\n    '.mkv': 'video/x-matroska',\r\n    '.mov': 'video/quicktime',\r\n    '.mp3': 'audio/mpeg',\r\n    '.mp4': 'video/mp4',\r\n    '.mpg': 'video/mpeg',\r\n    '.pdf': 'application/pdf',\r\n    '.png': 'image/png',\r\n    '.ppt': 'application/vnd.ms-powerpoint',\r\n    '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n    '.rar': 'application/x-rar-compressed',\r\n    '.srt': 'application/x-subrip',\r\n    '.svg': 'image/svg+xml',\r\n    '.swf': 'application/x-shockwave-flash',\r\n    '.ts': 'video/mp2t',\r\n    '.txt': 'text/plain',\r\n    '.wmv': 'video/x-ms-wmv',\r\n    '.xls': 'application/vnd.ms-excel',\r\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    '.zip': 'application/zip',\r\n    '.mks': 'video/x-matroska',\r\n    '.mts': 'model/vnd.mts',\r\n    '.wma': 'audio/x-ms-wma'\r\n};\r\n\r\nexport function getMimeForExtension(extension: string = '', defaultType = 'video/mp4') {\r\n    extension = extension.toLowerCase();\r\n    if (extension && (extension in mimeTypes)) {\r\n        return mimeTypes[extension as keyof typeof mimeTypes];\r\n    }\r\n    return defaultType;\r\n}\r\n\r\nexport function getExtensionForMime(contentType: string, defaultExtension = '.mp4') {\r\n    const match = contentType && Object.entries(mimeTypes)\r\n        .find(([ext, mime]) => contentType.startsWith((mime)));\r\n    return match\r\n        ? match[0]\r\n        : defaultExtension;\r\n\r\n}\r\n\r\nfunction sanitizeFileUpload(payload: FileUploadPayloadInternal) {\r\n    let {\r\n        file,\r\n        options: {\r\n            filename = 'upload',\r\n            contentType = ''\r\n        }\r\n    } = payload;\r\n\r\n    // sanitize content type\r\n    if (contentType === 'application/octet-stream') {\r\n        contentType = '';\r\n    }\r\n    if (/charset/.test(contentType)) {\r\n        contentType = contentType.replace(/;?.*charset.*$/, '');\r\n    }\r\n    let name = filename.replace('\\.[^\\.]+$', '');\r\n    let ext = filename.replace(name, '');\r\n    if (!ext) {\r\n        ext = getExtensionForMime(contentType);\r\n    }\r\n    filename = `${name}${ext}`;\r\n    if (!contentType) {\r\n        contentType = getMimeForExtension(ext);\r\n    }\r\n    if (isBlobLike(file) && file.type !== contentType) {\r\n        payload.file = file.slice(0, file.size, contentType);\r\n    }\r\n    Object.assign(payload.options, {\r\n        filename,\r\n        contentType\r\n    });\r\n    return payload;\r\n}\r\n\r\nexport function appendJSONToForm(form: FormData, fieldName: string, data: any) {\r\n    form.append(fieldName, JSON.stringify(data));\r\n}\r\n\r\n/**\r\n * This method is included for isometric support of uploading files in node.js and browser.\r\n * @param form FormData instance\r\n * @param fieldName name of field to add to form\r\n * @param file the file. Can be Blob or File on browser. On node.js it can be anything the 'form-data' package will accept\r\n * @param options optional filename, contentType and contentLength of upload. Otherwise it will try to guess based on input\r\n */\r\nexport async function appendFileToForm(form: FormData, fieldName: string, file: FileUploadType, options: UploadFileOptions = { }): Promise<UploadFileOptions> {\r\n    const opts: UploadFileOptions = {\r\n        filename: 'upload',\r\n        contentType: '',\r\n        ...options\r\n    };\r\n    let payload = await polyfills.parseFileUpload(file, opts);\r\n    payload = sanitizeFileUpload(payload);\r\n    await polyfills.appendFileToForm(form, fieldName, payload);\r\n    return payload.options;\r\n}\r\n\r\nasync function prepareFileUploadHeaders(form: FormData, headers: Headers, useChunkedTransfer?: boolean) {\r\n    await polyfills.prepareUploadHeaders(form, headers, useChunkedTransfer);\r\n}\r\n\r\n/**\r\n * helper to upload multipart forms with files attached.\r\n * This is to work around issues with node.js's FormData implementation\r\n * @param rev Rev Client\r\n * @param method\r\n * @param endpoint\r\n * @param form\r\n * @param useChunkedTransfer\r\n * @param options\r\n * @returns\r\n */\r\nexport async function uploadMultipart(\r\n    rev: RevClient,\r\n    method: Rev.HTTPMethod,\r\n    endpoint: string,\r\n    form: FormData,\r\n    useChunkedTransfer: boolean | UploadFileOptions = false,\r\n    options: Rev.RequestOptions = { }\r\n) {\r\n    const {\r\n        headers: optHeaders\r\n    } = options;\r\n\r\n    useChunkedTransfer = typeof useChunkedTransfer === 'boolean'\r\n        ? useChunkedTransfer\r\n        : !!useChunkedTransfer?.useChunkedTransfer;\r\n\r\n    // coerce to Headers object, may be undefined\r\n    const headers = new polyfills.Headers(optHeaders);\r\n    // switches to transfer encoding upload if necessary\r\n    await prepareFileUploadHeaders(form, headers, useChunkedTransfer);\r\n\r\n    options.headers = headers;\r\n    const { body } = await rev.request(method, endpoint, form, options);\r\n    return body;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { Rev, Video } from '../types';\r\nimport { appendFileToForm, appendJSONToForm, FileUploadType, UploadFileOptions, uploadMultipart } from '../utils/file-utils';\r\nimport polyfills from '../interop';\r\n\r\n\r\nfunction splitOptions(options: UploadFileOptions) {\r\n    const {\r\n        signal,\r\n        ...uploadOptions\r\n    } = options;\r\n\r\n    return {\r\n        requestOptions: signal ? { signal } : {},\r\n        uploadOptions\r\n    };\r\n}\r\n\r\ntype PresentationChaptersOptions = Rev.RequestOptions & UploadFileOptions & {\r\n    contentType?: 'application/vnd.ms-powerpoint'\r\n                | 'application/vnd.openxmlformats-officedocument.presentationml.presentation';\r\n};\r\n\r\ntype TranscriptionOptions = Rev.RequestOptions & UploadFileOptions & {\r\n    contentType?: 'text/plain'\r\n                | 'application/x-subrip';\r\n};\r\n\r\ntype ChaptersOptions = Rev.RequestOptions & Omit<UploadFileOptions, 'filename' | 'contentLength'> & {\r\n    contentType?: 'application/x-7z-compressed'\r\n                | 'text/csv'\r\n                | 'application/msword'\r\n                | 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n                | 'image/gif'\r\n                | 'image/jpeg'\r\n                | 'application/pdf'\r\n                | 'image/png'\r\n                | 'application/vnd.ms-powerpoint'\r\n                | 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\r\n                | 'application/x-rar-compressed'\r\n                | 'image/svg+xml'\r\n                | 'text/plain'\r\n                | 'application/vnd.ms-excel'\r\n                | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n                | 'application/zip'\r\n};\r\n\r\nexport default function uploadAPIFactory(rev: RevClient) {\r\n    const { FormData } = polyfills;\r\n\r\n\r\n\r\n    const uploadAPI = {\r\n        /**\r\n         * Upload a video, and returns the resulting video ID\r\n         */\r\n        async video(\r\n            file: FileUploadType,\r\n            metadata: Video.UploadMetadata = { uploader: rev.session.username ?? '' },\r\n            options: UploadFileOptions = {}): Promise<string> {\r\n\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            // prepare payload\r\n            const form = new FormData();\r\n\r\n            // at bare minimum the uploader needs to be defined\r\n            if (!metadata.uploader) {\r\n                // if using username login then uploader can be set to current user\r\n                const defaultUsername = rev.session.username;\r\n                if (defaultUsername) {\r\n                    metadata.uploader = defaultUsername;\r\n                } else {\r\n                    throw new TypeError('metadata must include uploader parameter');\r\n                }\r\n            }\r\n\r\n            // add video metadata to body (as json)\r\n            appendJSONToForm(form, 'video', metadata);\r\n\r\n            // append file (works around some node's form-data library quirks)\r\n            const filePayload = await appendFileToForm(form, 'VideoFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            const { videoId } = await uploadMultipart(rev, 'POST', '/api/v2/uploads/videos', form, filePayload, requestOptions);\r\n            return videoId;\r\n        },\r\n        async transcription(videoId: string, file: FileUploadType, language: Video.Transcription.SupportedLanguages = 'en', options: TranscriptionOptions = { }): Promise<void> {\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            // validate language\r\n            // TODO put this in a constants file somewhere\r\n            const supportedLanguages = ['de', 'en', 'en-gb', 'es-es', 'es-419', 'es', 'fr', 'fr-ca', 'id', 'it', 'ko', 'ja', 'nl', 'no', 'pl', 'pt', 'pt-br', 'th', 'tr', 'fi', 'sv', 'ru', 'el', 'zh', 'zh-tw', 'zh-cmn-hans'];\r\n\r\n            let lang = language.toLowerCase();\r\n            if (!supportedLanguages.includes(lang)) {\r\n                // try removing trailing language specifier\r\n                lang = lang.slice(2);\r\n                if (!supportedLanguages.includes(lang)) {\r\n                    throw new TypeError(`Invalid language ${language} - supported values are ${supportedLanguages.join(', ')}`);\r\n                }\r\n            }\r\n\r\n            const form = new FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'File', file, uploadOptions);\r\n            const metadata = {\r\n                files: [\r\n                    { language: lang, fileName: filePayload.filename }\r\n                ]\r\n            };\r\n            appendJSONToForm(form, 'TranscriptionFiles', metadata);\r\n\r\n            rev.log('info', `Uploading transcription to ${videoId} (${lang} ${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/transcription-files/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        async supplementalFile(videoId: string, file: FileUploadType, options: Rev.RequestOptions & UploadFileOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            const form = new FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'File', file, uploadOptions);\r\n            const metadata = {\r\n                files: [\r\n                    { fileName: filePayload.filename }\r\n                ]\r\n            };\r\n            appendJSONToForm(form, 'SupplementalFiles', metadata);\r\n\r\n            rev.log('info', `Uploading supplemental content to ${videoId} (${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/supplemental-files/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        /**\r\n         *\r\n         * @param videoId id of video to add chapters to\r\n         * @param chapters list of chapters. Must have time value and one of title or imageFile\r\n         * @param action replace = POST/replace existing with this payload\r\n         *               append = PUT/add or edit without removing existing\r\n         * @param options  additional upload + request options\r\n         */\r\n        async chapters(videoId: string, chapters: Video.Chapter.Request[], action: 'append' | 'replace' = 'replace', options: ChaptersOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            const form = new FormData();\r\n\r\n            type ChapterPayload = Video.Chapter.Request & {imageFile?: string};\r\n\r\n            const metadata: {chapters: ChapterPayload[]} = {\r\n                chapters: []\r\n            };\r\n\r\n            for (let chapter of chapters) {\r\n                const {\r\n                    title, time, imageFile\r\n                } = chapter;\r\n\r\n                const chapterEntry: ChapterPayload = { time };\r\n                if (title) {\r\n                    chapterEntry.title = title;\r\n                }\r\n                if (imageFile) {\r\n                    const filePayload = await appendFileToForm(form, 'File', imageFile, uploadOptions);\r\n                    // add image filename based on what was appended to form\r\n                    chapterEntry.imageFile = filePayload.filename;\r\n                }\r\n            }\r\n\r\n            appendJSONToForm(form, 'Chapters', metadata);\r\n\r\n            rev.log('info', `${action === 'replace' ? 'Uploading' : 'Updating'} ${metadata.chapters.length} chapters to ${videoId}`);\r\n\r\n            const method = action === 'replace'\r\n                ? 'POST'\r\n                : 'PUT';\r\n\r\n            await uploadMultipart(rev, method, `/api/v2/uploads/chapters/${videoId}`, form, uploadOptions, requestOptions);\r\n        },\r\n        async thumbnail(videoId: string, file: FileUploadType, options: Rev.RequestOptions & UploadFileOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            const form = new FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ThumbnailFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading thumbnail for ${videoId} (${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/images/${videoId}`, form, filePayload, requestOptions);\r\n        },\r\n        async presentationChapters(videoId: string, file: FileUploadType, options: PresentationChaptersOptions = {}) {\r\n            const { uploadOptions, requestOptions } = splitOptions(options);\r\n\r\n            const form = new FormData();\r\n\r\n            const filePayload = await appendFileToForm(form, 'ThumbnailFile', file, uploadOptions);\r\n\r\n            rev.log('info', `Uploading thumbnail for ${videoId} (${filePayload.filename} (${filePayload.contentType})`);\r\n\r\n            await uploadMultipart(rev, 'POST', `/api/v2/uploads/images/${videoId}`, form, filePayload, requestOptions);\r\n        }\r\n    };\r\n\r\n    return uploadAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev, User } from '../types';\r\nimport { LiteralString } from '../types/rev';\r\nimport { isPlainObject } from '../utils';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nexport default function userAPIFactory(rev: RevClient) {\r\n    async function details(userId: string): Promise<User>;\r\n    async function details(username: string, type: 'username'): Promise<User>;\r\n    async function details(email: string, type: 'email'): Promise<User>;\r\n    async function details(userLookupValue: string, type?: User.DetailsLookup) {\r\n        const query = (type === 'username' || type === 'email')\r\n            ? { type }\r\n            : undefined;\r\n\r\n        return rev.get<User>(`/api/v2/users/${userLookupValue}`, query);\r\n    }\r\n\r\n    const userAPI = {\r\n        /**\r\n         * get the list of roles available in the system (with role name and id)\r\n         */\r\n        get roles() {\r\n            return rev.admin.roles;\r\n        },\r\n        /**\r\n         * Create a new User in Rev\r\n         * @param user\r\n         * @returns the User ID of the created user\r\n         */\r\n        async create(user: User.Request): Promise<string> {\r\n            const { userId } = await rev.post('/api/v2/users', user);\r\n            return userId;\r\n        },\r\n        async delete(userId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/users/${userId}`);\r\n        },\r\n        /**\r\n         * Get details about a specific user\r\n         * @param userLookupValue default is search by userId\r\n         * @param type            specify that userLookupValue is email or\r\n         *                        username instead of userId\r\n         * @returns {User}        User details\r\n         */\r\n        details,\r\n        /**\r\n         * get user details by username\r\n         * @deprecated - use details(username, 'username')\r\n         */\r\n        async getByUsername(username: string) {\r\n            // equivalent to rev.get<User>(`/api/v2/users/${username}`, { type: 'username' });\r\n            return userAPI.details(username, 'username');\r\n        },\r\n        /**\r\n         * get user details by email address\r\n         * @deprecated - use details(email, 'email')\r\n         */\r\n        async getByEmail(email: string) {\r\n            return userAPI.details(email, 'email');\r\n        },\r\n        /**\r\n         * Check if user exists in the system. Instead of throwing on a 401/403 error if\r\n         * user does not exist it returns false. Returns user details if does exist,\r\n         * instead of just true\r\n         * @param userLookupValue userId, username, or email\r\n         * @param type\r\n         * @returns User if exists, otherwise false\r\n         */\r\n        async exists(userLookupValue: string, type?: User.DetailsLookup): Promise<User | false> {\r\n            const query = (type === 'username' || type === 'email')\r\n            ? { type }\r\n            : undefined;\r\n\r\n            const response = await rev.request<User>('GET', `/api/v2/users/${userLookupValue}`, query, { responseType: 'json', throwHttpErrors: false });\r\n\r\n            return response.statusCode === 200\r\n                ? response.body\r\n                : false;\r\n        },\r\n        /**\r\n         * use PATCH API to add user to the specified group\r\n         * https://revdocs.vbrick.com/reference#edituserdetails\r\n         * @param {string} userId id of user in question\r\n         * @param {string} groupId\r\n         * @returns {Promise<void>}\r\n         */\r\n        async addToGroup(userId: string, groupId: string) {\r\n            const operations = [\r\n                { op: 'add', path: '/GroupIds/-', value: groupId }\r\n            ];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        /**\r\n         * use PATCH API to add user to the specified group\r\n         * https://revdocs.vbrick.com/reference#edituserdetails\r\n         * @param {string} userId id of user in question\r\n         * @param {string} groupId\r\n         * @returns {Promise<void>}\r\n         */\r\n        async removeFromGroup(userId: string, groupId: string) {\r\n            const operations = [\r\n                { op: 'remove', path: '/GroupIds', value: groupId }\r\n            ];\r\n            await rev.patch(`/api/v2/users/${userId}`, operations);\r\n        },\r\n        /**\r\n         * search for users based on text query. Leave blank to return all users.\r\n         *\r\n         * @param {string} [searchText]\r\n         * @param {Rev.SearchOptions<{Id: string, Name: string}>} [options]\r\n         */\r\n        search(searchText?: string, options: Rev.SearchOptions<User.SearchHit> = { }): SearchRequest<User.SearchHit> {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/search/access-entity',\r\n                totalKey: 'totalEntities',\r\n                hitsKey: 'accessEntities',\r\n                /**\r\n                 * the result of this search is uppercase keys. This transforms them to camelcase to match other API responses\r\n                 */\r\n                transform: (items: User.RawSearchHit[]) => items.map(formatUserSearchHit)\r\n            };\r\n            const query: Record<string, any> = { type: 'user' };\r\n            if (searchText) {\r\n                query.q = searchText;\r\n            }\r\n            return new SearchRequest(rev, searchDefinition, query, options);\r\n        },\r\n        /**\r\n         * Returns the channel and category subscriptions for the user making the API call.\r\n         */\r\n        async listSubscriptions(): Promise<{ categories: string[], channels: string[] }> {\r\n            return rev.get('/api/v2/users/subscriptions');\r\n        },\r\n        async subscribe(id: string, type: LiteralString<'Channel' | 'Category'>): Promise<void> {\r\n            return rev.post('/api/v2/users/subscribe', { id, type });\r\n        },\r\n        /**\r\n         * Unsubscribe from specific channel or category.\r\n         */\r\n        async unsubscribe(id: string, type: LiteralString<'Channel' | 'Category'>): Promise<void> {\r\n            return rev.post('/api/v2/users/unsubscribe', { id, type });\r\n        },\r\n        async getNotifications(unread: boolean = false): Promise<{ count: number, notifications: User.Notification[]}> {\r\n            return rev.get('/api/v2/users/notifications', { unread });\r\n        },\r\n        /**\r\n         *\r\n         * @param notificationId If notificationId not provided, then all notifications for the user are marked as read.\r\n         */\r\n        async markNotificationRead(notificationId?: string): Promise<void> {\r\n            await rev.put('/api/v2/users/notifications', notificationId ? {notificationId} : undefined);\r\n        }\r\n    };\r\n    return userAPI;\r\n}\r\n\r\nfunction formatUserSearchHit(hit: User.RawSearchHit): User.SearchHit {\r\n    return {\r\n        userId: hit.Id,\r\n        entityType: hit.EntityType,\r\n        email: hit.Email,\r\n        firstname: hit.FirstName,\r\n        lastname: hit.LastName,\r\n        username: hit.UserName\r\n    };\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev, Video } from '../types';\r\nimport { asValidDate, isPlainObject } from '../utils';\r\nimport { IPageResponse, PagedRequest } from '../utils/paged-request';\r\n\r\n\r\nconst DEFAULT_INCREMENT: number = 30;\r\nconst DEFAULT_SORT: Rev.SortDirection = 'asc';\r\n\r\nfunction addDays(date: Date, numDays: number) {\r\n    const d = new Date(date.getTime());\r\n    d.setDate(d.getDate() + numDays);\r\n    return d;\r\n}\r\n\r\nfunction parseOptions(options: Video.VideoReportOptions) {\r\n    let {\r\n        incrementDays = DEFAULT_INCREMENT,\r\n        sortDirection = DEFAULT_SORT,\r\n        videoIds,\r\n        startDate,\r\n        endDate,\r\n        ...otherOptions\r\n    } = options;\r\n\r\n    // clamp increment to 1 minute - 30 days range\r\n    incrementDays = Math.min(\r\n        Math.max(\r\n            1 / 24 / 60,\r\n            parseFloat(incrementDays as any) || DEFAULT_INCREMENT\r\n        ),\r\n        30\r\n    );\r\n\r\n    // API expects videoIds as a string\r\n    if (Array.isArray(videoIds)) {\r\n        videoIds = videoIds\r\n            .map(s => s.trim())\r\n            .filter(Boolean)\r\n            .join(',');\r\n    }\r\n\r\n    return {\r\n        incrementDays, sortDirection, videoIds,\r\n        ...parseDates(startDate, endDate),\r\n        ...otherOptions\r\n    };\r\n}\r\n\r\nfunction parseDates(startArg: string | Date | undefined, endArg: string | Date | undefined) {\r\n    const now = new Date();\r\n    let startDate = asValidDate(startArg);\r\n    let endDate = asValidDate(endArg);\r\n\r\n    // if no end date set then use now, or startDate + 30 days\r\n    if (!endDate) {\r\n        if (startDate) {\r\n            endDate = addDays(startDate, 30);\r\n            if (endDate.getTime() > now.getTime()) {\r\n                endDate = now;\r\n            }\r\n        } else {\r\n            endDate = now;\r\n        }\r\n    }\r\n    // if no start/beginning date then use end - 30 days\r\n    if (!startDate)\r\n    {\r\n        startDate = addDays(endDate, -30);\r\n    }\r\n\r\n    // make sure times aren't swapped\r\n    if (startDate.getTime() > endDate.getTime()) {\r\n        [startDate, endDate] = [endDate, startDate];\r\n    }\r\n    return { startDate, endDate };\r\n}\r\n\r\nexport class VideoReportRequest extends PagedRequest<Video.VideoReportEntry> {\r\n    declare options: Required<ReturnType<typeof parseOptions>>;\r\n    private _rev: RevClient;\r\n    constructor(rev: RevClient, options: Video.VideoReportOptions = {}) {\r\n        super(parseOptions(options));\r\n\r\n        this._rev = rev;\r\n    }\r\n    protected async _requestPage() {\r\n        const { startDate, endDate } = this;\r\n        const {incrementDays, sortDirection, videoIds } = this.options;\r\n        const isAscending = sortDirection === 'asc';\r\n\r\n        let rangeStart = startDate;\r\n        let rangeEnd = endDate;\r\n        let done = false;\r\n\r\n        if (isAscending) {\r\n            rangeEnd = addDays(rangeStart, incrementDays);\r\n            //\r\n            if (rangeEnd >= endDate) {\r\n                done = true;\r\n                rangeEnd = endDate;\r\n            }\r\n        } else {\r\n            rangeStart = addDays(rangeEnd, -1 * incrementDays);\r\n            if (rangeStart <= startDate)\r\n            {\r\n                done = true;\r\n                rangeStart = startDate;\r\n            }\r\n        }\r\n\r\n        const query: Record<string, string> = {\r\n            after: rangeStart.toJSON(),\r\n            before: rangeEnd.toJSON()\r\n        };\r\n        if (videoIds) {\r\n            query.videoIds = videoIds;\r\n        }\r\n        const items: Video.VideoReportEntry[] = await this._rev.get(\"/api/v2/videos/report\", query, { responseType: \"json\" });\r\n\r\n        // go to next date range\r\n        if (!done) {\r\n            if (isAscending) {\r\n                this.startDate = rangeEnd;\r\n            } else {\r\n                this.endDate = rangeStart;\r\n            }\r\n        }\r\n\r\n        return {\r\n            items,\r\n            done\r\n        };\r\n    }\r\n    get startDate() { return this.options.startDate; }\r\n    set startDate(value) { this.options.startDate = value; }\r\n    get endDate() { return this.options.endDate; }\r\n    set endDate(value) { this.options.endDate = value; }\r\n}\r\n\r\nexport function videoReportAPI(rev: RevClient) {\r\n    function report(options?: Video.VideoReportOptions): VideoReportRequest;\r\n    function report(videoId: string, options?: Video.VideoReportOptions): VideoReportRequest;\r\n    function report(videoId?: string | Video.VideoReportOptions, options: Video.VideoReportOptions = {}): VideoReportRequest {\r\n        if (isPlainObject(videoId)) {\r\n            options = videoId;\r\n        } else if (typeof videoId === 'string') {\r\n            options = {\r\n                ...(options ?? {}),\r\n                videoIds: videoId\r\n            };\r\n        }\r\n        return new VideoReportRequest(rev, options);\r\n    }\r\n    return {\r\n        report\r\n    };\r\n}\r\n","import { Rev, Video } from \"../types\";\nimport { isPlainObject } from \"../utils\";\nimport type {RevClient} from \"../rev-client\";\n\n\nexport function videoDownloadAPI(rev: RevClient) {\n    /**\n     * Download a video. does not parse the output body. Note that content is sent as transfer-encoding: chunked;\n     * @param videoId\n     * @returns\n     */\n    async function download(videoId: string, options: Rev.RequestOptions = {}) {\n        const response = await rev.request<ReadableStream>('GET', `/api/v2/videos/${videoId}/download`, undefined, {\n            ...options,\n            responseType: 'stream'\n        });\n        return response;\n    }\n\n    /**\n     * download specified chapter. The chapter object has an imageUrl, this just wraps the functionality and adds the authorization header\n     * @param videoId\n     * @param chapter chapter object returned from the video.chapters(videoId) API call\n     * @returns\n     */\n    async function downloadChapter(chapter: Video.Chapter) {\n        const {imageUrl} = chapter;\n        const { body } = await rev.request<Blob>('GET', imageUrl, undefined, { responseType: 'blob' });\n        return body;\n    }\n\n    async function downloadSupplemental(file: Video.SupplementalFile): Promise<Blob>;\n    async function downloadSupplemental(videoId: string, fileId: string): Promise<Blob>;\n    async function downloadSupplemental(videoId: Video.SupplementalFile | string, fileId?: string) {\n        const endpoint = isPlainObject(videoId)\n            ? videoId.downloadUrl\n            : `/api/v2/videos/${videoId}/supplemental-files/${fileId}`;\n\n        const { body } = await rev.request<Blob>('GET', endpoint, undefined, { responseType: 'blob' });\n        return body;\n    }\n\n    async function downloadTranscription(transcription: Video.Transcription): Promise<Blob>;\n    async function downloadTranscription(videoId: string, language: string): Promise<Blob>;\n    async function downloadTranscription(videoId: Video.Transcription | string, language?: string) {\n        const endpoint = isPlainObject(videoId)\n            ? videoId.downloadUrl\n            : `/api/v2/videos/${videoId}/transcription-files/${language}`;\n\n        const { body } = await rev.request<Blob>('GET', endpoint, undefined, { responseType: 'blob' });\n        return body;\n    }\n\n    async function downloadThumbnail(thumbnailUrl: string): Promise<Blob>;\n    async function downloadThumbnail(query: { imageId: string }): Promise<Blob>;\n    async function downloadThumbnail(query: { videoId: string }): Promise<Blob>;\n    async function downloadThumbnail(query: string | { videoId?: string, imageId?: string; }) {\n        let {\n            videoId = '',\n            imageId = ''\n        } = typeof query === 'string'\n                ? { imageId: query }\n                : query;\n\n        if (!(videoId || imageId)) {\n            throw new TypeError('No video/image specified to download');\n        }\n\n        if (!imageId) {\n            // allow getting from api if only know the video ID\n            imageId = (await rev.get<{video: Video.Playback}>(`/api/v2/videos/${videoId}/playback-url`)).video.thumbnailUrl;\n        } else if (!imageId.endsWith('.jpg')) {\n            // make sure id has ending file extension\n            imageId = `${imageId}.jpg`;\n        }\n\n        let thumbnailUrl: string = imageId.startsWith('http')\n            ? imageId\n            : `/api/v2/media/videos/thumbnails/${imageId}.jpg`;\n\n        const { body } = await rev.request<Blob>('GET', thumbnailUrl, undefined, { responseType: 'blob' });\n        return body;\n    }\n\n    return {\n        download,\n        downloadChapter,\n        downloadSupplemental,\n        downloadThumbnail,\n        downloadTranscription\n    };\n}\n","import { RevError } from '../rev-error';\r\nimport type { RevClient } from '../rev-client';\r\nimport { Video, Rev, Admin } from '../types';\r\nimport { SearchRequest } from '../utils/request-utils';\r\nimport { videoReportAPI } from './video-report-request';\r\nimport { videoDownloadAPI } from './video-download';\r\n\r\ntype VideoSearchDetailedItem = Video.SearchHit & (Video.Details | { error?: Error });\r\n\r\nexport default function videoAPIFactory(rev: RevClient) {\r\n    /** get list of comments on a video\r\n         * set showAll param to true to include un-redacted values of comments (admin only)\r\n         */\r\n    function comments(videoId: string): Promise<Video.Comment[]>;\r\n    function comments(videoId: string, showAll: true): Promise<Video.Comment.Unredacted[]>;\r\n    async function comments(videoId: string, showAll: boolean = false): Promise<Video.Comment[] | Video.Comment.Unredacted[]> {\r\n        const response = await rev.get<Video.Comment.ListResponse>(`/api/v2/videos/${videoId}/comments`, showAll ? { showAll: 'true' } : undefined);\r\n        return response.comments;\r\n    }\r\n    const videoAPI = {\r\n        /**\r\n         * This is an example of using the video Patch API to only update a single field\r\n         * @param videoId\r\n         * @param title\r\n         */\r\n        async setTitle(videoId: string, title: string) {\r\n            const payload = [{ op: 'add', path: '/Title', value: title }];\r\n            await rev.patch(`/api/v2/videos/${videoId}`, payload);\r\n        },\r\n        /**\r\n         * Use the Patch API to update a single Custom Field.\r\n         * @param videoId - id of video to update\r\n         * @param customField - the custom field object (with id and value)\r\n         */\r\n        async setCustomField(videoId: string, customField: Pick<Admin.CustomField, 'id' | 'value'>) {\r\n            const payload = [\r\n                { op: 'remove', path: '/customFields', value: customField.id },\r\n                { op: 'add', path: '/customFields/-', value: customField }\r\n            ];\r\n            await rev.patch(`/api/v2/videos/${videoId}`, payload);\r\n        },\r\n        /**\r\n         * get processing status of a video\r\n         * @param videoId\r\n         */\r\n        async status(videoId: string): Promise<Video.StatusResponse> {\r\n            return rev.get(`/api/v2/videos/${videoId}/status`);\r\n        },\r\n        async details(videoId: string): Promise<Video.Details> {\r\n            return rev.get(`/api/v2/videos/${videoId}/details`);\r\n        },\r\n        comments,\r\n        async chapters(videoId: string): Promise<Video.Chapter[]> {\r\n            try {\r\n                const {chapters} = await rev.get<{chapters: Video.Chapter[]}>(`/api/v2/videos/${videoId}/chapters`);\r\n                return chapters;\r\n            } catch (err) {\r\n                // if no chapters then this api returns a 400 response\r\n                if (err instanceof RevError && err.code === \"NoVideoChapters\") {\r\n                    return [];\r\n                }\r\n                throw err;\r\n            }\r\n        },\r\n        async supplementalFiles(videoId: string): Promise<Video.SupplementalFile[]> {\r\n            const {supplementalFiles} = await rev.get(`/api/v2/videos/${videoId}/supplemental-files`);\r\n            return supplementalFiles;\r\n        },\r\n        // async deleteSupplementalFiles(videoId: string, fileId: string | string[]): Promise<void> {\r\n        //     const fileIds = Array.isArray(fileId)\r\n        //         ? fileId.join(',')\r\n        //         : fileId\r\n        //     await rev.delete(`/api/v2/videos/${videoId}/supplemental-files`, { fileIds });\r\n        // },\r\n        async transcriptions(videoId: string): Promise<Video.Transcription[]> {\r\n            const {transcriptionFiles} = await rev.get(`/api/v2/videos/${videoId}/transcription-files`);\r\n            return transcriptionFiles;\r\n        },\r\n        get upload() {\r\n            return rev.upload.video;\r\n        },\r\n        async migrate(videoId: string, options: Video.MigrateRequest) {\r\n            await rev.put(`/api/v2/videos/${videoId}/migration`, options);\r\n        },\r\n        /**\r\n         * search for videos, return as one big list. leave blank to get all videos in the account\r\n         */\r\n        search(query: Video.SearchOptions = { }, options: Rev.SearchOptions<Video.SearchHit> = { }): Rev.ISearchRequest<Video.SearchHit> {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/videos/search',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'videos'\r\n            };\r\n            const request = new SearchRequest<Video.SearchHit>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        /**\r\n         * Example of using the video search API to search for videos, then getting\r\n         * the details of each video\r\n         * @param query\r\n         * @param options\r\n         */\r\n        searchDetailed(\r\n            query: Video.SearchOptions = { },\r\n            options: Rev.SearchOptions<VideoSearchDetailedItem> = { }\r\n        ): Rev.ISearchRequest<VideoSearchDetailedItem> {\r\n            const searchDefinition = {\r\n                endpoint: '/api/v2/videos/search',\r\n                totalKey: 'totalVideos',\r\n                hitsKey: 'videos',\r\n                transform: async (videos: Video.SearchHit[]) => {\r\n                    const result = [];\r\n                    for (let rawVideo of videos) {\r\n                        const out: Video.SearchHit & (Video.Details & { error?: Error; }) = rawVideo as any;\r\n                        try {\r\n                            const details = await videoAPI.details(rawVideo.id);\r\n                            Object.assign(out, details);\r\n                        } catch (error: any) {\r\n                            out.error = error;\r\n                        }\r\n                        result.push(out);\r\n                    }\r\n                    return result;\r\n                }\r\n            };\r\n            const request = new SearchRequest<Video.SearchHit>(rev, searchDefinition, query, options);\r\n            return request;\r\n        },\r\n        async playbackInfo(videoId: string): Promise<Video.Playback> {\r\n            const { video } = await rev.get(`/api/v2/videos/${videoId}/playback-url`);\r\n            return video;\r\n        },\r\n        ...videoDownloadAPI(rev),\r\n        ...videoReportAPI(rev),\r\n        async trim(videoId: string, removedSegments: Array<{ start: string, end: string }>) {\r\n            return rev.post(`/api/v2/videos/${videoId}/trim`, removedSegments);\r\n        }\r\n    };\r\n    return videoAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport type { Rev } from '../types';\r\nimport { Webcast } from '../types/webcast';\r\nimport { SearchRequest } from '../utils/request-utils';\r\n\r\nfunction getSummaryFromResponse<T extends Record<string, any>>(response: T, hitsKey: string) {\r\n    const ignoreKeys = ['scrollId', 'statusCode', 'statusDescription'];\r\n\r\n    const summary = Object.fromEntries(Object.entries(response)\r\n        .filter(([key, value]) => {\r\n            // don't include arrays or scroll type keys\r\n            return !(key === hitsKey || ignoreKeys.includes(key) || Array.isArray(value));\r\n        }));\r\n    return summary;\r\n}\r\n\r\nexport class RealtimeReportRequest<T extends Webcast.RealtimeSession = Webcast.RealtimeSession> extends SearchRequest<T> {\r\n    declare summary: Webcast.RealtimeSummary;\r\n    constructor(rev: RevClient, eventId: string, query: Webcast.RealtimeRequest = {}, options: Rev.SearchOptions<T> = {}) {\r\n        const searchDefinition: Rev.SearchDefinition<T> = {\r\n            endpoint: `/api/v2/scheduled-events/${eventId}/real-time/attendees`,\r\n            totalKey: 'total',\r\n            hitsKey: 'attendees',\r\n            // get summary from initial response\r\n            request: async (endpoint, query, options) => {\r\n                const response = await rev.post<Webcast.RealtimeSummary>(endpoint, query, options);\r\n\r\n                const summary = getSummaryFromResponse(response, 'attendees');\r\n                Object.assign(this.summary, summary);\r\n                return response;\r\n            }\r\n        };\r\n        super(rev, searchDefinition, query, options);\r\n        this.summary = {} as any;\r\n    }\r\n    /**\r\n     * get the aggregate statistics only, instead of actual session data.\r\n     * @returns {Webcast.PostEventSummary}\r\n     */\r\n    async getSummary() {\r\n        // set maxResults to 0 to mark request as done, since first page of sessions will be lost\r\n        this.options.maxResults = 0;\r\n        // must get first page of results to load summary data\r\n        await this.nextPage();\r\n        return this.summary;\r\n    }\r\n}\r\n\r\nexport class PostEventReportRequest extends SearchRequest<Webcast.PostEventSession> {\r\n    declare summary: Webcast.PostEventSummary;\r\n    constructor(rev: RevClient, query: { eventId: string, runNumber?: number }, options: Rev.SearchOptions<Webcast.PostEventSession> = {}) {\r\n        const { eventId, runNumber } = query;\r\n        const runQuery = (runNumber && runNumber >= 0)\r\n            ? { runNumber }\r\n            : {};\r\n\r\n        const searchDefinition: Rev.SearchDefinition<Webcast.PostEventSession> = {\r\n            endpoint: `/api/v2/scheduled-events/${eventId}/post-event-report`,\r\n                totalKey: 'totalSessions',\r\n                hitsKey: 'sessions',\r\n                request: async (endpoint, query, options) => {\r\n                    const response = await rev.get<Webcast.PostEventSummary>(endpoint, query, options);\r\n\r\n                    const summary = getSummaryFromResponse(response, 'sessions');\r\n                    Object.assign(this.summary, summary);\r\n                    return response;\r\n                }\r\n        };\r\n        super(rev, searchDefinition,  runQuery, options);\r\n        this.summary = {};\r\n    }\r\n    /**\r\n     * get the aggregate statistics only, instead of actual session data.\r\n     * @returns {Webcast.PostEventSummary}\r\n     */\r\n    async getSummary() {\r\n        // set maxResults to 0 to mark request as done, since first page of sessions will be lost\r\n        this.options.maxResults = 0;\r\n        // must get first page of results to load summary data\r\n        await this.nextPage();\r\n        return this.summary;\r\n    }\r\n}\r\n","import { Rev } from '..';\r\nimport type { RevClient } from '../rev-client';\r\nimport { Webcast, GuestRegistration } from '../types/webcast';\r\nimport { SearchRequest } from '../utils/request-utils';\r\nimport { titleCase } from '../utils';\r\nimport { PostEventReportRequest, RealtimeReportRequest } from './webcast-report-request';\r\n\r\ntype RealtimeSession<T extends Webcast.RealtimeRequest | undefined> = T extends { attendeeDetails: 'All' }\r\n    ? Webcast.RealtimeSessionDetail\r\n    : T extends { attendeeDetails: 'Counts' }\r\n    ? never\r\n    : Webcast.RealtimeSession;\r\n\r\nexport default function webcastAPIFactory(rev: RevClient) {\r\n    const webcastAPI = {\r\n        async list(options: Webcast.ListRequest = { }): Promise<Webcast[]> {\r\n            return rev.get('/api/v2/scheduled-events', options, { responseType: 'json' });\r\n        },\r\n        search(query: Webcast.SearchRequest, options?: Rev.SearchOptions<Webcast>): SearchRequest<Webcast> {\r\n            const searchDefinition: Rev.SearchDefinition<Webcast> = {\r\n                endpoint: `/api/v2/search/scheduled-events`,\r\n                totalKey: 'total',\r\n                hitsKey: 'events',\r\n                request: (endpoint, query, options) => rev.post(endpoint, query, options),\r\n                isPost: true\r\n            };\r\n            return new SearchRequest<Webcast>(rev, searchDefinition, query, options);\r\n        },\r\n        async create(event: Webcast.CreateRequest): Promise<string> {\r\n            const { eventId } = await rev.post(`/api/v2/scheduled-events`, event);\r\n            return eventId;\r\n        },\r\n        async details(eventId: string): Promise<Webcast.Details> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}`);\r\n        },\r\n        async edit(eventId: string, event: Webcast.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}`, event);\r\n        },\r\n        // async patch - not yet implemented\r\n        async delete(eventId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}`);\r\n        },\r\n        async editAccess(eventId: string, entities: Webcast.EditAttendeesRequest): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/access-control`, entities);\r\n        },\r\n        attendees(\r\n            eventId: string,\r\n            runNumber?: number,\r\n            options?: Rev.SearchOptions<Webcast.PostEventSession>\r\n        ) {\r\n            return new PostEventReportRequest(rev, { eventId, runNumber }, options);\r\n        },\r\n        realtimeAttendees<T extends Webcast.RealtimeRequest | undefined>(\r\n            eventId: string,\r\n            query?: T,\r\n            options?: Rev.SearchOptions<RealtimeSession<T>>\r\n        ) {\r\n            return new RealtimeReportRequest<RealtimeSession<T>>(rev, eventId, query, options);\r\n        },\r\n        async questions(eventId: string, runNumber?: number): Promise<Webcast.Question[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/questions`, query, { responseType: 'json' });\r\n        },\r\n        async pollResults(eventId: string, runNumber?: number): Promise<Webcast.PollResults[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/poll-results`, query, { responseType: 'json' });\r\n        },\r\n        async comments(eventId: string, runNumber?: number): Promise<Webcast.Comment[]> {\r\n            const query = (runNumber ?? -1) >= 0 ? { runNumber } : {};\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/comments`, query, { responseType: 'json' });\r\n        },\r\n        async status(eventId: string): Promise<Webcast.Status> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/status`);\r\n        },\r\n        async playbackUrl(eventId: string, options: Webcast.PlaybackUrlRequest = { }): Promise<Webcast.Playback[]> {\r\n            const {\r\n                ip,\r\n                userAgent\r\n            } = options;\r\n\r\n            const query = ip ? { ip } : undefined;\r\n\r\n            const requestOptions: Rev.RequestOptions = {\r\n                responseType: 'json'\r\n            };\r\n            if (userAgent) {\r\n                requestOptions.headers = { 'User-Agent': userAgent };\r\n            }\r\n\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/playback-url`, query, requestOptions);\r\n        },\r\n        async startEvent(eventId: string, preProduction: boolean = false): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/start`, { preProduction });\r\n        },\r\n        async stopEvent(eventId: string, preProduction: boolean = false): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/start`, { preProduction });\r\n        },\r\n        async startBroadcast(eventId: string): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/broadcast`);\r\n        },\r\n        async stopBroadcast(eventId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/broadcast`);\r\n        },\r\n        async startRecord(eventId: string): Promise<void> {\r\n            await rev.put(`/api/v2/scheduled-events/${eventId}/record`);\r\n        },\r\n        async stopRecord(eventId: string): Promise<void> {\r\n            await rev.delete(`/api/v2/scheduled-events/${eventId}/record`);\r\n        },\r\n        async linkVideo(eventId: string, videoId: string, autoRedirect: boolean = true) {\r\n            const payload = {\r\n                videoId,\r\n                redirectVod: autoRedirect\r\n            };\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/linked-video`, payload);\r\n        },\r\n        async unlinkVideo(eventId: string) {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/linked-video`);\r\n        },\r\n        /**\r\n         * Retrieve details of a specific guest user Public webcast registration.\r\n         * @param eventId - Id of the Public webcast\r\n         * @param registrationId - Id of guest user's registration to retrieve\r\n         * @returns\r\n         */\r\n        async guestRegistration(eventId: string, registrationId: string): Promise<GuestRegistration.Details> {\r\n            return rev.get(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`);\r\n        },\r\n        /**\r\n         * Register one attendee/guest user for an upcoming Public webcast. Make sure you first enable Public webcast pre-registration before adding registrations.\r\n         * @param eventId\r\n         * @param registration\r\n         * @returns\r\n         */\r\n        async createGuestRegistration(eventId: string, registration: GuestRegistration.Request): Promise<GuestRegistration.Details> {\r\n            return rev.post(`/api/v2/scheduled-events/${eventId}/registrations`, registration);\r\n        },\r\n        listGuestRegistrations(\r\n            eventId: string,\r\n            query: GuestRegistration.SearchRequest = {},\r\n            options?: Rev.SearchOptions<GuestRegistration>\r\n        ): SearchRequest<GuestRegistration> {\r\n            const searchDefinition: Rev.SearchDefinition<GuestRegistration> = {\r\n                endpoint: `/api/v2/scheduled-events/${eventId}/registrations`,\r\n                /** NOTE: this API doesn't actually return a total, so this will always be undefined */\r\n                totalKey: 'total',\r\n                hitsKey: 'guestUsers'\r\n            };\r\n            return new SearchRequest<GuestRegistration>(rev, searchDefinition, query, options);\r\n        },\r\n        updateGuestRegistration(eventId: string, registrationId: string, registration: GuestRegistration.Request): Promise<void> {\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`, registration);\r\n        },\r\n        patchGuestRegistration(eventId: string, registrationId: string, registration: Partial<GuestRegistration.Request>): Promise<void> {\r\n            const operations = Object.entries(registration)\r\n                .map(([key, value]) => {\r\n                    let path = `/${titleCase(key)}`;\r\n                    return { op: 'replace', path, value };\r\n                });\r\n            return rev.put(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`, operations);\r\n        },\r\n        deleteGuestRegistration(eventId: string, registrationId: string): Promise<void> {\r\n            return rev.delete(`/api/v2/scheduled-events/${eventId}/registrations/${registrationId}`);\r\n        },\r\n\r\n    };\r\n\r\n    return webcastAPI;\r\n}\r\n","import type { RevClient } from '../rev-client';\r\nimport { Zone } from '../types/zone';\r\n\r\nexport default function zonesAPIFactory(rev: RevClient) {\r\n    const zonesAPI = {\r\n        async list(): Promise<{ defaultZone: Zone, zones: Zone[]; }> {\r\n            return rev.get(`/api/v2/zones`, undefined, { responseType: 'json' });\r\n        },\r\n        async flatList(): Promise<Zone.FlatZone[]> {\r\n            const {\r\n                defaultZone,\r\n                zones\r\n            } = await zonesAPI.list();\r\n            const flatZones: Omit<Zone, 'childZones'>[] = [defaultZone];\r\n            function recursiveAdd(inZone: Zone) {\r\n                const {\r\n                    childZones = [],\r\n                    ...zone\r\n                } = inZone;\r\n\r\n                flatZones.push(zone);\r\n                childZones.forEach(recursiveAdd);\r\n            }\r\n            zones.forEach(recursiveAdd);\r\n            return flatZones;\r\n        },\r\n        async create(zone: Zone.CreateRequest): Promise<string> {\r\n            const { zoneId } = await rev.post(`/api/v2/zones`, zone, { responseType: 'json' });\r\n            return zoneId;\r\n        },\r\n        async edit(zoneId: string, zone: Zone.CreateRequest): Promise<void> {\r\n            return rev.put(`/api/v2/zones/${zoneId}`, zone);\r\n        },\r\n        delete(zoneId: string) {\r\n            return rev.delete(`/api/v2/zones/${zoneId}`);\r\n        },\r\n        get devices() {\r\n            return rev.device.listZoneDevices;\r\n        }\r\n    };\r\n    return zonesAPI;\r\n}\r\n","import type { RevClient } from './rev-client';\r\nimport type { Rev } from './types';\r\nimport { isPlainObject, sleep } from './utils';\r\nimport interop from './interop';\r\n\r\nconst ONE_MINUTE = 1000 * 60;\r\n\r\n// obsfucate credentials to avoid accidental disclosure\r\nconst _credentials = Symbol('credentials');\r\n\r\ninterface LoginResponse {\r\n    token: string,\r\n    expiration: string,\r\n    userId?: string,\r\n    refreshToken?: string,\r\n    apiKey?: string;\r\n}\r\n\r\nclass SessionKeepAlive {\r\n    private readonly _session!: SessionBase;\r\n    private controller?: AbortController;\r\n    extendOptions: Required<Rev.KeepAliveOptions>;\r\n    error?: undefined | Error;\r\n    private _isExtending: boolean = false;\r\n    constructor(session: SessionBase, options: Rev.KeepAliveOptions = { }) {\r\n        // TODO verify values?\r\n        this.extendOptions = {\r\n            extendThresholdMilliseconds: 3 * ONE_MINUTE,\r\n            keepAliveInterval: 5 * ONE_MINUTE,\r\n            verify: true,\r\n            ...options\r\n        };\r\n\r\n        Object.defineProperties(this, {\r\n            _session: {\r\n                get: () => session,\r\n                enumerable: false\r\n            }\r\n        });\r\n    }\r\n    getNextExtendTime() {\r\n        const { expires } = this._session;\r\n        if (!expires) {\r\n            return 0;\r\n        }\r\n        const {\r\n            keepAliveInterval: interval,\r\n            extendThresholdMilliseconds: threshold\r\n        } = this.extendOptions;\r\n\r\n        const timeTillExpiration = expires.getTime() - Date.now();\r\n        // clamp range to within 0 and max interval\r\n        return Math.max(0, Math.min(timeTillExpiration - threshold, interval));\r\n    }\r\n    private async _poll() {\r\n        const { _session: session } = this;\r\n        // force stop other poll process if already polling\r\n        // keep reference to controller in case of reset\r\n        const controller = this._reset();\r\n        const { signal } = controller;\r\n\r\n        while (session.isConnected && !signal.aborted) {\r\n            const nextExtendTime = this.getNextExtendTime();\r\n            await sleep(nextExtendTime, signal);\r\n\r\n            // check if poll was aborted. if so don't try to extend\r\n            if (signal.aborted) {\r\n                break;\r\n            }\r\n\r\n            // extend session\r\n            // possible this can throw an error\r\n            try {\r\n                // extending may re-login, so pause poll resets for now\r\n                this._isExtending = true;\r\n                await session.lazyExtend(this.extendOptions);\r\n            } catch (err: any) {\r\n                // swallow error, but signal stopped using abort controller\r\n                controller.abort();\r\n                this.error = err;\r\n            } finally {\r\n                this._isExtending = false;\r\n            }\r\n        }\r\n    }\r\n    start() {\r\n        if (this._isExtending) {\r\n            return;\r\n        }\r\n        this._poll();\r\n    }\r\n    stop() {\r\n        if (this._isExtending) {\r\n            return;\r\n        }\r\n        if (this.controller) {\r\n            this.controller.abort();\r\n        }\r\n    }\r\n    private _reset() {\r\n        this.error = undefined;\r\n        this._isExtending = false;\r\n        const oldController = this.controller;\r\n        this.controller = new interop.AbortController();\r\n\r\n        // stop previous poll\r\n        if (oldController) {\r\n            oldController.abort();\r\n        }\r\n        return this.controller;\r\n    }\r\n    get isAlive() {\r\n        return this.controller && !this.controller.signal.aborted;\r\n    }\r\n}\r\n\r\nabstract class SessionBase implements Rev.IRevSession {\r\n    token?: string;\r\n    expires: Date;\r\n    protected readonly rev!: RevClient;\r\n    protected readonly [_credentials]!: Rev.Credentials;\r\n    readonly keepAlive?: SessionKeepAlive;\r\n    constructor(rev: RevClient, credentials: Rev.Credentials, keepAliveOptions?: boolean | Rev.KeepAliveOptions) {\r\n        this.expires = new Date();\r\n\r\n        if (keepAliveOptions === true) {\r\n            this.keepAlive = new SessionKeepAlive(this);\r\n        } else if (isPlainObject(keepAliveOptions)) {\r\n            this.keepAlive = new SessionKeepAlive(this, keepAliveOptions);\r\n        }\r\n\r\n        // add as private member\r\n        Object.defineProperties(this, {\r\n            rev: {\r\n                get() { return rev; },\r\n                enumerable: false\r\n            },\r\n            [_credentials]: {\r\n                get() { return credentials; },\r\n                enumerable: false\r\n            }\r\n        });\r\n    }\r\n    async login() {\r\n        this.token = undefined;\r\n        this.expires = new Date();\r\n\r\n        const {\r\n            expiration,\r\n            ...session\r\n        } = await this._login();\r\n\r\n        Object.assign(this, session);\r\n\r\n        const expires = new Date(expiration);\r\n        // VERY edge case where old date could be returned - just assume 10 min expiration\r\n        if (expires.getTime() < this.expires.getTime()) {\r\n            this.expires.setUTCMinutes(this.expires.getUTCMinutes() + 10);\r\n        } else {\r\n            this.expires = expires;\r\n        }\r\n\r\n        if (this.keepAlive) {\r\n            this.keepAlive.start();\r\n        }\r\n    }\r\n    async extend() {\r\n        const { expiration } = await this._extend();\r\n        this.expires = new Date(expiration);\r\n    }\r\n    async logoff() {\r\n        if (this.keepAlive) {\r\n            this.keepAlive.stop();\r\n        }\r\n        try {\r\n            await this._logoff();\r\n        } finally {\r\n            this.token = undefined;\r\n            this.expires = new Date();\r\n        }\r\n    }\r\n    async verify() {\r\n        try {\r\n            await this.rev.auth.verifySession();\r\n            return true;\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @returns wasExtended - whether session was extended / re-logged in\r\n     */\r\n    async lazyExtend(options: Rev.KeepAliveOptions = { }) {\r\n        const {\r\n            extendThresholdMilliseconds: threshold = 3 * ONE_MINUTE,\r\n            verify: shouldVerify = true\r\n        } = options;\r\n\r\n        const { expires } = this;\r\n        const timeLeft = expires\r\n            ? expires.getTime() - Date.now()\r\n            : -1;\r\n\r\n        // login if session expired\r\n        if (timeLeft <= 0) {\r\n            await this.login();\r\n            return true;\r\n        }\r\n\r\n        // extend if within extend window\r\n        if (timeLeft > threshold) {\r\n            try {\r\n                await this.extend();\r\n                // successful extend, nothing more to do\r\n                return true;\r\n            } catch (error) {\r\n                this.rev.log('warn', 'Error extending session - re-logging in', error);\r\n            }\r\n            // check if valid session if plenty of time left\r\n        } else if (!shouldVerify || await this.verify()) {\r\n            // valid, no change\r\n            return false;\r\n        }\r\n\r\n        // if reached here then need to re-login\r\n        await this.login();\r\n        return true;\r\n    }\r\n    /**\r\n     * check if expiration time of session has passed\r\n     */\r\n    get isExpired() {\r\n        const { expires } = this;\r\n        if (!expires) {\r\n            return true;\r\n        }\r\n        return Date.now() > expires.getTime();\r\n    }\r\n    /**\r\n     * returns true if session isn't expired and has a token\r\n     */\r\n    get isConnected() {\r\n        return !!this.token && !this.isExpired;\r\n    }\r\n    get username() {\r\n        return this[_credentials].username;\r\n    }\r\n    protected abstract _login(): Promise<LoginResponse>;\r\n    protected abstract _extend(): Promise<{ expiration: string; }>;\r\n    protected abstract _logoff(): Promise<void>;\r\n    public abstract toJSON(): Rev.IRevSessionState;\r\n}\r\n\r\n/**\r\n * Use OAuth2Session instead if possible\r\n * @deprecated\r\n */\r\nexport class OAuthSession extends SessionBase {\r\n    refreshToken?: string;\r\n    async _login() {\r\n        const { oauthConfig, authCode } = this[_credentials];\r\n        if (!oauthConfig || !authCode) {\r\n            throw new TypeError('OAuth Config / auth code not specified');\r\n        }\r\n        const {\r\n            accessToken: token,\r\n            expiration,\r\n            refreshToken,\r\n            userId\r\n        } = await this.rev.auth.loginOAuth(oauthConfig, authCode);\r\n        return { token, expiration, refreshToken, userId };\r\n    }\r\n    async _extend() {\r\n        const { [_credentials]: { oauthConfig } } = this;\r\n\r\n        const {\r\n            // other API calls call this \"token\" instead of \"accessToken\", hence the rename\r\n            accessToken: token,\r\n            expiration,\r\n            refreshToken\r\n        } = await this.rev.auth.extendSessionOAuth(oauthConfig as any, <string>this.refreshToken);\r\n\r\n        // unlike other extend methods this updates the token + refreshToken each time\r\n        Object.assign(this, { token, refreshToken });\r\n        return { expiration };\r\n    }\r\n    async _logoff() {\r\n        // nothing to do\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires,\r\n            refreshToken: this.refreshToken\r\n        };\r\n    }\r\n}\r\n\r\nexport class OAuth2Session extends SessionBase {\r\n    refreshToken?: string;\r\n    async _login() {\r\n        const { oauthConfig, code, codeVerifier } = this[_credentials];\r\n        if (!oauthConfig || !code || !codeVerifier) {\r\n            throw new TypeError('OAuth Config / auth code / verifier not specified');\r\n        }\r\n        const {\r\n            access_token: token,\r\n            expires_in,\r\n            refresh_token: refreshToken,\r\n            userId\r\n        } = await this.rev.auth.loginOAuth2(oauthConfig, code, codeVerifier);\r\n        const expiresTime = Date.now() + parseInt(expires_in, 10) * 1000;\r\n        const expiration = new Date(expiresTime).toISOString();\r\n        return { token, expiration, refreshToken, userId };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n}\r\n\r\nexport class UserSession extends SessionBase {\r\n    userId?: string;\r\n    async _login() {\r\n        const { username, password } = this[_credentials];\r\n        if (!username || !password) {\r\n            throw new TypeError('username/password not specified');\r\n        }\r\n        const {\r\n            token,\r\n            expiration,\r\n            id: userId\r\n        } = await this.rev.auth.loginUser(username, password);\r\n        return { token, expiration, userId };\r\n    }\r\n    async _extend() {\r\n        const { userId } = this;\r\n\r\n        return this.rev.auth.extendSessionUser(<string>userId);\r\n    }\r\n    async _logoff() {\r\n        const { userId } = this;\r\n\r\n        return this.rev.auth.logoffUser(<string>userId);\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires,\r\n            userId: this.userId\r\n        };\r\n    }\r\n}\r\n\r\nexport class ApiKeySession extends SessionBase {\r\n    async _login() {\r\n        const { apiKey, secret } = this[_credentials];\r\n        if (!apiKey || !secret) {\r\n            throw new TypeError('apiKey/secret not specified');\r\n        }\r\n        return this.rev.auth.loginToken(apiKey, secret);\r\n    }\r\n    async _extend() {\r\n        const { apiKey } = this[_credentials];\r\n        return this.rev.auth.extendSessionToken(<string>apiKey);\r\n    }\r\n    async _logoff() {\r\n        const { apiKey } = this[_credentials];\r\n        return this.rev.auth.logoffToken(<string>apiKey);\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires,\r\n            apiKey: this[_credentials].apiKey\r\n        };\r\n    }\r\n}\r\n\r\nexport class JWTSession extends SessionBase {\r\n    async _login() {\r\n        const { jwtToken } = this[_credentials];\r\n        if (!jwtToken) {\r\n            throw new TypeError('JWT Token not specified');\r\n        }\r\n        const {accessToken: token, expiration} = await this.rev.auth.loginJWT(jwtToken);\r\n        return { token, expiration, issuer: 'vbrick' };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n}\r\n\r\nexport class AccessTokenSession extends SessionBase {\r\n    // just verify user on login\r\n    async _login() {\r\n        await this.rev.auth.verifySession();\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires?.toISOString(),\r\n            issuer: 'vbrick'\r\n        };\r\n    }\r\n    async _extend() {\r\n        return this.rev.auth.extendSession();\r\n    }\r\n    async _logoff() {\r\n        return;\r\n    }\r\n    public toJSON(): Rev.IRevSessionState {\r\n        return {\r\n            token: this.token || '',\r\n            expiration: this.expires\r\n        };\r\n    }\r\n}\r\n\r\nexport function createSession(rev: RevClient, credentials: Rev.Credentials, keepAliveOptions?: boolean | Rev.KeepAliveOptions) {\r\n    let session: Rev.IRevSession;\r\n\r\n    const {\r\n        session: sessionState = {} as Rev.IRevSessionState,\r\n        ...creds\r\n    } = credentials;\r\n\r\n    const {\r\n        token,\r\n        expiration,\r\n        refreshToken,\r\n        userId\r\n    } = sessionState;\r\n\r\n    const now = Date.now();\r\n    const expires = new Date(expiration || now);\r\n    const hasSession = (token && typeof token === 'string') && (expires.getTime() > now);\r\n\r\n    const isOAuth2Login = credentials.oauthConfig && (credentials.code && credentials.codeVerifier);\r\n    const isLegacyOauthLogin = credentials.oauthConfig && (credentials.authCode || (hasSession && refreshToken));\r\n    const isApiKeyLogin = credentials.apiKey && (credentials.secret || (hasSession && !userId));\r\n    const isUsernameLogin = credentials.username && (credentials.password || (hasSession && userId));\r\n    const isJWTLogin = credentials.jwtToken;\r\n\r\n    // prefer oauth first, then apikey then username if multiple params specified\r\n    if (isOAuth2Login) {\r\n        session = new OAuth2Session(rev, creds, keepAliveOptions);\r\n    } else if (isLegacyOauthLogin) {\r\n        session = new OAuthSession(rev, creds, keepAliveOptions);\r\n        if (refreshToken) {\r\n            (session as OAuthSession).refreshToken = refreshToken;\r\n        }\r\n    } else if (isApiKeyLogin) {\r\n        session = new ApiKeySession(rev, creds, keepAliveOptions);\r\n    } else if (isJWTLogin) {\r\n        session = new JWTSession(rev, creds, keepAliveOptions);\r\n    } else if (isUsernameLogin) {\r\n        session = new UserSession(rev, creds, keepAliveOptions);\r\n        if (userId) {\r\n            (session as UserSession).userId = userId;\r\n        }\r\n    } else if (hasSession) {\r\n        session = new AccessTokenSession(rev, creds, keepAliveOptions);\r\n    } else {\r\n        throw new TypeError('Must specify credentials (username+password, apiKey+secret or oauthConfig+authCode)');\r\n    }\r\n\r\n    if (hasSession) {\r\n        session.token = token;\r\n        session.expires = expires;\r\n    }\r\n    return session;\r\n}\r\n","import { RevError } from './rev-error';\r\nimport { isPlainObject, retry } from './utils';\r\nimport * as api from './api';\r\nimport polyfills from './interop';\r\nimport { Rev } from './types';\r\nimport { decodeBody } from './utils/request-utils';\r\nimport { createSession } from './rev-session';\r\n\r\ntype PayloadType = { [key: string]: any; } | Record<string, any> | any[];\r\n\r\nexport class RevClient {\r\n    url: string;\r\n    logEnabled: boolean;\r\n    session: Rev.IRevSession;\r\n    readonly admin!: ReturnType<typeof api.admin>;\r\n    readonly audit!: ReturnType<typeof api.audit>;\r\n    readonly auth!: ReturnType<typeof api.auth>;\r\n    readonly category!: ReturnType<typeof api.category>;\r\n    readonly channel!: ReturnType<typeof api.channel>;\r\n    readonly device!: ReturnType<typeof api.device>;\r\n    readonly group!: ReturnType<typeof api.group>;\r\n    readonly playlist!: ReturnType<typeof api.playlist>;\r\n    readonly recording!: ReturnType<typeof api.recording>;\r\n    readonly upload!: ReturnType<typeof api.upload>;\r\n    readonly user!: ReturnType<typeof api.user>;\r\n    readonly video!: ReturnType<typeof api.video>;\r\n    readonly webcast!: ReturnType<typeof api.webcast>;\r\n    readonly zones!: ReturnType<typeof api.zones>;\r\n    constructor(options: Rev.Options) {\r\n        if (!isPlainObject(options) || !options.url) {\r\n            throw new TypeError('Missing configuration options for client - url and username/password or apiKey/secret');\r\n        }\r\n        const {\r\n            url,\r\n            log,\r\n            logEnabled = false,\r\n            keepAlive = true,\r\n            ...credentials\r\n        } = options;\r\n\r\n        // get just the origin of provided url\r\n        const urlObj = new URL(url);\r\n        this.url = urlObj.origin;\r\n\r\n        // will throw error if credentials are invalid\r\n        this.session = createSession(this, credentials, keepAlive);\r\n\r\n        // add logging functionality\r\n        this.logEnabled = !!logEnabled;\r\n        if (log) {\r\n            this.log = (severity: Rev.LogSeverity, ...args: any[]) => {\r\n                if (!this.logEnabled) {\r\n                    return;\r\n                }\r\n                log(severity, ...args);\r\n            };\r\n        }\r\n\r\n        // add all API endpoints\r\n        Object.defineProperties(this, {\r\n            admin: { value: api.admin(this), writable: false },\r\n            audit: { value: api.audit(this), writable: false },\r\n            auth: { value: api.auth(this), writable: false },\r\n            category: { value: api.category(this), writable: false },\r\n            channel: { value: api.channel(this), writable: false },\r\n            device: { value: api.device(this), writable: false },\r\n            group: { value: api.group(this), writable: false },\r\n            playlist: { value: api.playlist(this), writable: false },\r\n            recording: { value: api.recording(this), writable: false },\r\n            upload: { value: api.upload(this), writable: false },\r\n            user: { value: api.user(this), writable: false },\r\n            video: { value: api.video(this), writable: false },\r\n            webcast: { value: api.webcast(this), writable: false },\r\n            // COMBAK - DEPRECATED\r\n            webcasts: { get: () => {\r\n                this.log('debug', 'webcasts is deprecated - use rev.webcast instead');\r\n                return this.webcast;\r\n            }, enumerable: false },\r\n            zones: { value: api.zones(this), writable: false }\r\n        });\r\n    }\r\n    /**\r\n     * make a REST request\r\n     */\r\n    async request<T = any>(method: Rev.HTTPMethod, endpoint: string, data: any = undefined, options: Rev.RequestOptions = { }): Promise<Rev.Response<T>> {\r\n        const url = new URL(endpoint, this.url);\r\n        // ensure url matches Rev url, to avoid sending authorization header elsewhere\r\n        if (url.origin !== this.url) {\r\n            throw new TypeError(`Invalid endpoint - must be relative to ${this.url}`);\r\n        }\r\n\r\n        let {\r\n            headers: optHeaders,\r\n            responseType,\r\n            throwHttpErrors = true,\r\n            ...requestOpts\r\n        } = options;\r\n\r\n        // setup headers for JSON communication (by default)\r\n        const headers = new polyfills.Headers(optHeaders);\r\n\r\n        // add authorization header from stored token\r\n        if (this.session.token && !headers.has('Authorization')) {\r\n            headers.set('Authorization', `VBrick ${this.session.token}`);\r\n        }\r\n        if (headers.get('Authorization') === '') {\r\n            // if Auth is explicitly set to '' then remove from list\r\n            headers.delete('Authorization');\r\n        }\r\n\r\n        const fetchOptions: RequestInit = {\r\n            mode: 'cors',\r\n            method,\r\n            ...requestOpts,\r\n            headers\r\n        };\r\n\r\n        // default to JSON request payload, but allow it to be overridden\r\n        let shouldSetAsJSON = !headers.has('Content-Type');\r\n\r\n        // add provided data to request body or as query string parameters\r\n\r\n        if (data) {\r\n            if (['POST', 'PUT', 'PATCH'].includes(method.toUpperCase())) {\r\n                if (typeof data === 'string') {\r\n                    fetchOptions.body = data;\r\n                } else if (data instanceof polyfills.FormData) {\r\n                    shouldSetAsJSON = false;\r\n                    fetchOptions.body = data;\r\n                } else if (isPlainObject(data) || Array.isArray(data)) {\r\n                    fetchOptions.body = JSON.stringify(data);\r\n                } else {\r\n                    fetchOptions.body = data;\r\n                }\r\n            } else if (isPlainObject(data)) {\r\n                // add values to query string of URL\r\n                for (let [key, value] of Object.entries(data)) {\r\n                    url.searchParams.append(key, value);\r\n                }\r\n            } else {\r\n                throw new TypeError(`Invalid payload for request to ${method} ${endpoint}`);\r\n            }\r\n        }\r\n\r\n        // default to JSON communication\r\n        if (!headers.has('Accept')) {\r\n            headers.set('Accept', 'application/json');\r\n        }\r\n        // set to JSON payload\r\n        if (shouldSetAsJSON) {\r\n            headers.set('Content-Type', 'application/json');\r\n        }\r\n\r\n        // OPTIONAL log request and response\r\n        this.log('debug', `Request ${method} ${endpoint}`);\r\n\r\n        // NOTE: will throw error on AbortError or client fetch errors\r\n        const response = await polyfills.fetch(`${url}`, {\r\n            ...fetchOptions,\r\n            method,\r\n            headers\r\n        });\r\n\r\n        const {\r\n            ok,\r\n            status: statusCode,\r\n            statusText,\r\n            headers: responseHeaders\r\n        } = response;\r\n\r\n        this.log('debug', `Response ${method} ${endpoint} ${statusCode} ${statusText}`);\r\n\r\n        // check for error response code\r\n        if (!ok) {\r\n            if (throwHttpErrors) {\r\n                const err = await RevError.create(response);\r\n                throw err;\r\n            }\r\n            // if not throwwing then force responseType to auto (could be text or json)\r\n            responseType = undefined;\r\n        }\r\n\r\n        let body: any = response.body;\r\n\r\n        switch (responseType) {\r\n            case 'json':\r\n                body = await response.json();\r\n                break;\r\n            case 'text':\r\n                body = await response.text();\r\n                break;\r\n            case 'blob':\r\n                body = await response.blob();\r\n                break;\r\n            case 'stream':\r\n                body = response.body;\r\n                break;\r\n            default:\r\n                // if no mimetype in response then assume JSON unless otherwise specified\r\n                body = await decodeBody(response, headers.get('Accept'));\r\n        }\r\n\r\n        return {\r\n            statusCode,\r\n            headers: responseHeaders,\r\n            body,\r\n            response\r\n        };\r\n    }\r\n    async get<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('GET', endpoint, data, options);\r\n        return body;\r\n    }\r\n    async post<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('POST', endpoint, data, options);\r\n        return body;\r\n    }\r\n    async put<T = any>(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<T> {\r\n        const { body } = await this.request('PUT', endpoint, data, options);\r\n        return body;\r\n    }\r\n    async patch(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<void> {\r\n        await this.request('PATCH', endpoint, data, options);\r\n    }\r\n    async delete(endpoint: string, data?: PayloadType, options?: Rev.RequestOptions): Promise<void> {\r\n        await this.request('DELETE', endpoint, data, options);\r\n    }\r\n    /**\r\n     * authenticate with Rev\r\n     */\r\n    async connect() {\r\n\r\n        // Rarely the login call will fail on first attempt, therefore this code attempts to login\r\n        // multiple times\r\n        await retry(\r\n            () => this.session.login(),\r\n            // Do not re-attempt logins with invalid user/password or rate limiting - it can lock out the user\r\n            (err: RevError) => ![401, 429].includes(err.status));\r\n    }\r\n    /**\r\n     * end rev session\r\n     */\r\n    async disconnect() {\r\n        try {\r\n            await this.session.logoff();\r\n        } catch (error) {\r\n            this.log('warn', `Error in logoff, ignoring: ${error}`);\r\n        }\r\n    }\r\n    // this should get called every 15 minutes or so to extend the connection session\r\n    async extendSession() {\r\n        return this.session.extend();\r\n    }\r\n    /**\r\n     * Returns true/false based on if the session is currently valid\r\n     * @returns Promise<boolean>\r\n     */\r\n    async verifySession() {\r\n        return this.session.verify();\r\n    }\r\n    get isConnected() {\r\n        return !!this.session.token && !this.session.isExpired;\r\n    }\r\n    get token() {\r\n        return this.session.token;\r\n    }\r\n    get sessionExpires() {\r\n        return this.session.expires;\r\n    }\r\n    get sessionState() {\r\n        return this.session.toJSON();\r\n    }\r\n    set sessionState(state: Rev.IRevSessionState) {\r\n        this.session.token = `${state.token}`;\r\n        this.session.expires = new Date(state.expiration);\r\n        for (let key of ['apiKey', 'refreshToken', 'userId'] as (keyof Rev.IRevSessionState)[]) {\r\n            if (key in state) {\r\n                (this.session as any)[key] = `${state[key] || ''}`;\r\n            }\r\n        }\r\n    }\r\n    log(severity: Rev.LogSeverity, ...args: any[]) {\r\n        if (!this.logEnabled) {\r\n            return;\r\n        }\r\n        const ts = (new Date()).toJSON().replace('T', ' ').slice(0, -5);\r\n        console.debug(`${ts} REV-CLIENT [${severity}]`, ...args);\r\n    }\r\n}\r\n","export * from './rev-client';\r\nexport {\r\n    RevError,\r\n    ScrollError\r\n} from './rev-error';\r\nexport type {\r\n    AccessControl,\r\n    Admin,\r\n    Audit,\r\n    Auth,\r\n    Category,\r\n    Channel,\r\n    Device,\r\n    Group,\r\n    GuestRegistration,\r\n    OAuth,\r\n    Rev,\r\n    Role,\r\n    User,\r\n    Video,\r\n    Playlist,\r\n    Recording,\r\n    RegistrationField,\r\n    Webcast,\r\n    Zone\r\n\r\n} from './types';\r\n\r\nimport {rateLimit} from './utils';\r\nimport {getExtensionForMime, getMimeForExtension} from './utils/file-utils'\r\nexport const utils = {\r\n    rateLimit,\r\n    getExtensionForMime,\r\n    getMimeForExtension\r\n};\r\n\r\nimport { RevClient } from './rev-client';\r\nexport default RevClient;\r\n"],"mappings":"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","names":["roles","customFields","field","i","hmacSign","query","options","query","options","ONE_MINUTE"]}